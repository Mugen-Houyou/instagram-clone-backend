
/**
 * Client
**/

import * as runtime from '@prisma/client/runtime';

export import DMMF = runtime.DMMF

/**
 * Prisma Errors
 */
export import PrismaClientKnownRequestError = runtime.PrismaClientKnownRequestError
export import PrismaClientUnknownRequestError = runtime.PrismaClientUnknownRequestError
export import PrismaClientRustPanicError = runtime.PrismaClientRustPanicError
export import PrismaClientInitializationError = runtime.PrismaClientInitializationError
export import PrismaClientValidationError = runtime.PrismaClientValidationError

/**
 * Re-export of sql-template-tag
 */
export import sql = runtime.sqltag
export import empty = runtime.empty
export import join = runtime.join
export import raw = runtime.raw
export import Sql = runtime.Sql

/**
 * Decimal.js
 */
export import Decimal = runtime.Decimal

/**
 * Prisma Client JS version: 2.14.0
 * Query Engine version: 5d491261d382a2a5ffdc71de17072b0e409f1cc1
 */
export type PrismaVersion = {
  client: string
}

export const prismaVersion: PrismaVersion 

/**
 * Utility Types
 */

/**
 * From https://github.com/sindresorhus/type-fest/
 * Matches a JSON object.
 * This type can be useful to enforce some input to be JSON-compatible or as a super-type to be extended from. 
 */
export type JsonObject = {[Key in string]?: JsonValue}
 
/**
 * From https://github.com/sindresorhus/type-fest/
 * Matches a JSON array.
 */
export interface JsonArray extends Array<JsonValue> {}
 
/**
 * From https://github.com/sindresorhus/type-fest/
 * Matches any valid JSON value.
 */
export type JsonValue = string | number | boolean | null | JsonObject | JsonArray

/**
 * Same as JsonObject, but allows undefined
 */
export type InputJsonObject = {[Key in string]?: JsonValue}
 
export interface InputJsonArray extends Array<JsonValue> {}
 
export type InputJsonValue = undefined |  string | number | boolean | null | InputJsonObject | InputJsonArray
 type SelectAndInclude = {
  select: any
  include: any
}
type HasSelect = {
  select: any
}
type HasInclude = {
  include: any
}
type CheckSelect<T, S, U> = T extends SelectAndInclude
  ? 'Please either choose `select` or `include`'
  : T extends HasSelect
  ? U
  : T extends HasInclude
  ? U
  : S

/**
 * Get the type of the value, that the Promise holds.
 */
export type PromiseType<T extends PromiseLike<any>> = T extends PromiseLike<infer U> ? U : T;

/**
 * Get the return type of a function which returns a Promise.
 */
export type PromiseReturnType<T extends (...args: any) => Promise<any>> = PromiseType<ReturnType<T>>


export type Enumerable<T> = T | Array<T>;

export type RequiredKeys<T> = {
  [K in keyof T]-?: {} extends Pick<T, K> ? never : K
}[keyof T]

export type TruthyKeys<T> = {
  [key in keyof T]: T[key] extends false | undefined | null ? never : key
}[keyof T]

export type TrueKeys<T> = TruthyKeys<Pick<T, RequiredKeys<T>>>

/**
 * Subset
 * @desc From `T` pick properties that exist in `U`. Simple version of Intersection
 */
export type Subset<T, U> = {
  [key in keyof T]: key extends keyof U ? T[key] : never;
};

/**
 * Subset + Intersection
 * @desc From `T` pick properties that exist in `U` and intersect `K`
 */
export type SubsetIntersection<T, U, K> = {
  [key in keyof T]: key extends keyof U ? T[key] : never
} &
  K

type Without<T, U> = { [P in Exclude<keyof T, keyof U>]?: never };

/**
 * XOR is needed to have a real mutually exclusive union type
 * https://stackoverflow.com/questions/42123407/does-typescript-support-mutually-exclusive-types
 */
type XOR<T, U> = (T | U) extends object ? (Without<T, U> & U) | (Without<U, T> & T) : T | U;


/**
 * Is T a Record?
 */
type IsObject<T extends any> = T extends Array<any>
? False
: T extends Date
? False
: T extends Buffer
? False
: T extends BigInt
? False
: T extends object
? True
: False


/**
 * If it's T[], return T
 */
export type UnEnumerate<T extends unknown> = T extends Array<infer U> ? U : T

/**
 * From ts-toolbelt
 */

export type Union = any

/** Helper Types for "Merge" **/
export type IntersectOf<U extends Union> = (
  U extends unknown ? (k: U) => void : never
) extends (k: infer I) => void
  ? I
  : never

export type Overwrite<O extends object, O1 extends object> = {
    [K in keyof O]: K extends keyof O1 ? O1[K] : O[K];
} & {};

type _Merge<U extends object> = IntersectOf<Overwrite<U, {
    [K in keyof U]-?: At<U, K>;
}>>;

type Key = string | number | symbol;
type AtBasic<O extends object, K extends Key> = K extends keyof O ? O[K] : never;
type AtStrict<O extends object, K extends Key> = O[K & keyof O];
type AtLoose<O extends object, K extends Key> = O extends unknown ? AtStrict<O, K> : never;
export type At<O extends object, K extends Key, strict extends Boolean = 1> = {
    1: AtStrict<O, K>;
    0: AtLoose<O, K>;
}[strict];

export type ComputeRaw<A extends any> = A extends Function ? A : {
  [K in keyof A]: A[K];
} & {};

export type OptionalFlat<O> = {
  [K in keyof O]?: O[K];
} & {};

type _Strict<U, _U = U> = U extends unknown ? U & OptionalFlat<Record<Exclude<Keys<_U>, keyof U>, never>> : never;

export type Strict<U extends object> = ComputeRaw<_Strict<U>>;
/** End Helper Types for "Merge" **/

export type Merge<U extends object> = ComputeRaw<_Merge<Strict<U>>>;

/**
A [[Boolean]]
*/
export type Boolean = True | False

// /**
// 1
// */
export type True = 1

/**
0
*/
export type False = 0

export type Not<B extends Boolean> = {
  0: 1
  1: 0
}[B]

export type Extends<A1 extends any, A2 extends any> = [A1] extends [never]
  ? 0 // anything `never` is false
  : A1 extends A2
  ? 1
  : 0

export type Has<U extends Union, U1 extends Union> = Not<
  Extends<Exclude<U1, U>, U1>
>

export type Or<B1 extends Boolean, B2 extends Boolean> = {
  0: {
    0: 0
    1: 1
  }
  1: {
    0: 1
    1: 1
  }
}[B1][B2]

export type Keys<U extends Union> = U extends unknown ? keyof U : never



/**
 * Used by group by
 */

export type GetScalarType<T, O> = O extends object ? {
  [P in keyof T]: P extends keyof O
    ? O[P]
    : never
} : never

type FieldPaths<
  T,
  U = Omit<T, 'avg' | 'sum' | 'count' | 'min' | 'max'>
> = IsObject<T> extends True ? U : T

type GetHavingFields<T> = {
  [K in keyof T]: Or<
    Or<Extends<'OR', K>, Extends<'AND', K>>,
    Extends<'NOT', K>
  > extends True
    ? // infer is only needed to not hit TS limit
      // based on the brilliant idea of Pierre-Antoine Mills
      // https://github.com/microsoft/TypeScript/issues/30188#issuecomment-478938437
      T[K] extends infer TK
      ? GetHavingFields<UnEnumerate<TK> extends object ? Merge<UnEnumerate<TK>> : never>
      : never
    : {} extends FieldPaths<T[K]>
    ? never
    : K
}[keyof T]

/**
 * Convert tuple to union
 */
type _TupleToUnion<T> = T extends (infer E)[] ? E : never
type TupleToUnion<K extends readonly any[]> = _TupleToUnion<K>
type MaybeTupleToUnion<T> = T extends any[] ? TupleToUnion<T> : T

/**
 * Like `Pick`, but with an array
 */
type PickArray<T, K extends Array<keyof T>> = Pick<T, TupleToUnion<K>>





/**
 * Model Movie
 */

export type Movie = {
  id: number
  title: string
  year: number
  genre: string | null
  createdAt: Date
  updatedAt: Date
}

/**
 * Model User
 */

export type User = {
  id: number
  firstName: string
  lastName: string | null
  username: string
  email: string
  password: string
  bio: string | null
  avatar: string | null
  createdAt: Date
  updatedAt: Date
}

/**
 * Model Photo
 */

export type Photo = {
  id: number
  userId: number
  file: string
  caption: string | null
  createdAt: Date
  updatedAt: Date
}

/**
 * Model Hashtag
 */

export type Hashtag = {
  id: number
  hashtag: string
  createdAt: Date
  updatedAt: Date
}

/**
 * Model Like
 */

export type Like = {
  id: number
  photoId: number
  userId: number
  createdAt: Date
  updatedAt: Date
}

/**
 * Model Comment
 */

export type Comment = {
  id: number
  payload: string
  photoId: number
  userId: number
  createdAt: Date
  updatedAt: Date
}


/**
 * ##  Prisma Client ʲˢ
 * 
 * Type-safe database client for TypeScript & Node.js (ORM replacement)
 * @example
 * ```
 * const prisma = new PrismaClient()
 * // Fetch zero or more Movies
 * const movies = await prisma.movie.findMany()
 * ```
 *
 * 
 * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
 */
export class PrismaClient<
  T extends Prisma.PrismaClientOptions = Prisma.PrismaClientOptions,
  U = 'log' extends keyof T ? T['log'] extends Array<Prisma.LogLevel | Prisma.LogDefinition> ? Prisma.GetEvents<T['log']> : never : never
      > {
      /**
       * @private
       */
      private fetcher;
      /**
       * @private
       */
      private readonly dmmf;
      /**
       * @private
       */
      private connectionPromise?;
      /**
       * @private
       */
      private disconnectionPromise?;
      /**
       * @private
       */
      private readonly engineConfig;
      /**
       * @private
       */
      private readonly measurePerformance;

    /**
   * ##  Prisma Client ʲˢ
   * 
   * Type-safe database client for TypeScript & Node.js (ORM replacement)
   * @example
   * ```
   * const prisma = new PrismaClient()
   * // Fetch zero or more Movies
   * const movies = await prisma.movie.findMany()
   * ```
   *
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
   */

  constructor(optionsArg ?: T);
  $on<V extends U>(eventType: V, callback: (event: V extends 'query' ? Prisma.QueryEvent : Prisma.LogEvent) => void): void;

  /**
   * Connect with the database
   */
  $connect(): Promise<void>;

  /**
   * Disconnect from the database
   */
  $disconnect(): Promise<any>;

  /**
   * Add a middleware
   */
  $use(cb: Prisma.Middleware): void

  /**
   * Executes a raw query and returns the number of affected rows
   * @example
   * ```
   * // With parameters use prisma.executeRaw``, values will be escaped automatically
   * const result = await prisma.executeRaw`UPDATE User SET cool = ${true} WHERE id = ${1};`
   * // Or
   * const result = await prisma.executeRaw('UPDATE User SET cool = $1 WHERE id = $2 ;', true, 1)
  * ```
  * 
  * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
  */
  $executeRaw < T = any > (query: string | TemplateStringsArray | Prisma.Sql, ...values: any[]): Promise<number>;

  /**
   * Performs a raw query and returns the SELECT data
   * @example
   * ```
   * // With parameters use prisma.queryRaw``, values will be escaped automatically
   * const result = await prisma.queryRaw`SELECT * FROM User WHERE id = ${1} OR email = ${'ema.il'};`
   * // Or
   * const result = await prisma.queryRaw('SELECT * FROM User WHERE id = $1 OR email = $2;', 1, 'ema.il')
  * ```
  * 
  * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
  */
  $queryRaw < T = any > (query: string | TemplateStringsArray | Prisma.Sql, ...values: any[]): Promise<T>;

  /**
   * Execute queries in a transaction
   * @example
   * ```
   * const [george, bob, alice] = await prisma.transaction([
   *   prisma.user.create({ data: { name: 'George' } }),
   *   prisma.user.create({ data: { name: 'Bob' } }),
   *   prisma.user.create({ data: { name: 'Alice' } }),
   * ])
   * ```
   */
  $transaction: PromiseConstructor['all']

      /**
   * `prisma.movie`: Exposes CRUD operations for the **Movie** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Movies
    * const movies = await prisma.movie.findMany()
    * ```
    */
  get movie(): Prisma.MovieDelegate;

  /**
   * `prisma.user`: Exposes CRUD operations for the **User** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Users
    * const users = await prisma.user.findMany()
    * ```
    */
  get user(): Prisma.UserDelegate;

  /**
   * `prisma.photo`: Exposes CRUD operations for the **Photo** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Photos
    * const photos = await prisma.photo.findMany()
    * ```
    */
  get photo(): Prisma.PhotoDelegate;

  /**
   * `prisma.hashtag`: Exposes CRUD operations for the **Hashtag** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Hashtags
    * const hashtags = await prisma.hashtag.findMany()
    * ```
    */
  get hashtag(): Prisma.HashtagDelegate;

  /**
   * `prisma.like`: Exposes CRUD operations for the **Like** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Likes
    * const likes = await prisma.like.findMany()
    * ```
    */
  get like(): Prisma.LikeDelegate;

  /**
   * `prisma.comment`: Exposes CRUD operations for the **Comment** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Comments
    * const comments = await prisma.comment.findMany()
    * ```
    */
  get comment(): Prisma.CommentDelegate;
}

export namespace Prisma {
  export import DMMF = runtime.DMMF

  /**
   * Prisma Errors
   */
  export import PrismaClientKnownRequestError = runtime.PrismaClientKnownRequestError
  export import PrismaClientUnknownRequestError = runtime.PrismaClientUnknownRequestError
  export import PrismaClientRustPanicError = runtime.PrismaClientRustPanicError
  export import PrismaClientInitializationError = runtime.PrismaClientInitializationError
  export import PrismaClientValidationError = runtime.PrismaClientValidationError

  /**
   * Re-export of sql-template-tag
   */
  export import sql = runtime.sqltag
  export import empty = runtime.empty
  export import join = runtime.join
  export import raw = runtime.raw
  export import Sql = runtime.Sql

  /**
   * Decimal.js
   */
  export import Decimal = runtime.Decimal

  /**
   * Prisma Client JS version: 2.14.0
   * Query Engine version: 5d491261d382a2a5ffdc71de17072b0e409f1cc1
   */
  export type PrismaVersion = {
    client: string
  }

  export const prismaVersion: PrismaVersion 

  /**
   * Utility Types
   */

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches a JSON object.
   * This type can be useful to enforce some input to be JSON-compatible or as a super-type to be extended from. 
   */
  export type JsonObject = {[Key in string]?: JsonValue}
 
  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches a JSON array.
   */
  export interface JsonArray extends Array<JsonValue> {}
 
  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches any valid JSON value.
   */
  export type JsonValue = string | number | boolean | null | JsonObject | JsonArray

  /**
   * Same as JsonObject, but allows undefined
   */
  export type InputJsonObject = {[Key in string]?: JsonValue}
 
  export interface InputJsonArray extends Array<JsonValue> {}
 
  export type InputJsonValue = undefined |  string | number | boolean | null | InputJsonObject | InputJsonArray
   type SelectAndInclude = {
    select: any
    include: any
  }
  type HasSelect = {
    select: any
  }
  type HasInclude = {
    include: any
  }
  type CheckSelect<T, S, U> = T extends SelectAndInclude
    ? 'Please either choose `select` or `include`'
    : T extends HasSelect
    ? U
    : T extends HasInclude
    ? U
    : S

  /**
   * Get the type of the value, that the Promise holds.
   */
  export type PromiseType<T extends PromiseLike<any>> = T extends PromiseLike<infer U> ? U : T;

  /**
   * Get the return type of a function which returns a Promise.
   */
  export type PromiseReturnType<T extends (...args: any) => Promise<any>> = PromiseType<ReturnType<T>>


  export type Enumerable<T> = T | Array<T>;

  export type RequiredKeys<T> = {
    [K in keyof T]-?: {} extends Pick<T, K> ? never : K
  }[keyof T]

  export type TruthyKeys<T> = {
    [key in keyof T]: T[key] extends false | undefined | null ? never : key
  }[keyof T]

  export type TrueKeys<T> = TruthyKeys<Pick<T, RequiredKeys<T>>>

  /**
   * Subset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection
   */
  export type Subset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never;
  };

  /**
   * Subset + Intersection
   * @desc From `T` pick properties that exist in `U` and intersect `K`
   */
  export type SubsetIntersection<T, U, K> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    K

  type Without<T, U> = { [P in Exclude<keyof T, keyof U>]?: never };

  /**
   * XOR is needed to have a real mutually exclusive union type
   * https://stackoverflow.com/questions/42123407/does-typescript-support-mutually-exclusive-types
   */
  type XOR<T, U> = (T | U) extends object ? (Without<T, U> & U) | (Without<U, T> & T) : T | U;


  /**
   * Is T a Record?
   */
  type IsObject<T extends any> = T extends Array<any>
  ? False
  : T extends Date
  ? False
  : T extends Buffer
  ? False
  : T extends BigInt
  ? False
  : T extends object
  ? True
  : False


  /**
   * If it's T[], return T
   */
  export type UnEnumerate<T extends unknown> = T extends Array<infer U> ? U : T

  /**
   * From ts-toolbelt
   */

  export type Union = any

  /** Helper Types for "Merge" **/
  export type IntersectOf<U extends Union> = (
    U extends unknown ? (k: U) => void : never
  ) extends (k: infer I) => void
    ? I
    : never

  export type Overwrite<O extends object, O1 extends object> = {
      [K in keyof O]: K extends keyof O1 ? O1[K] : O[K];
  } & {};

  type _Merge<U extends object> = IntersectOf<Overwrite<U, {
      [K in keyof U]-?: At<U, K>;
  }>>;

  type Key = string | number | symbol;
  type AtBasic<O extends object, K extends Key> = K extends keyof O ? O[K] : never;
  type AtStrict<O extends object, K extends Key> = O[K & keyof O];
  type AtLoose<O extends object, K extends Key> = O extends unknown ? AtStrict<O, K> : never;
  export type At<O extends object, K extends Key, strict extends Boolean = 1> = {
      1: AtStrict<O, K>;
      0: AtLoose<O, K>;
  }[strict];

  export type ComputeRaw<A extends any> = A extends Function ? A : {
    [K in keyof A]: A[K];
  } & {};

  export type OptionalFlat<O> = {
    [K in keyof O]?: O[K];
  } & {};

  type _Strict<U, _U = U> = U extends unknown ? U & OptionalFlat<Record<Exclude<Keys<_U>, keyof U>, never>> : never;

  export type Strict<U extends object> = ComputeRaw<_Strict<U>>;
  /** End Helper Types for "Merge" **/

  export type Merge<U extends object> = ComputeRaw<_Merge<Strict<U>>>;

  /**
  A [[Boolean]]
  */
  export type Boolean = True | False

  // /**
  // 1
  // */
  export type True = 1

  /**
  0
  */
  export type False = 0

  export type Not<B extends Boolean> = {
    0: 1
    1: 0
  }[B]

  export type Extends<A1 extends any, A2 extends any> = [A1] extends [never]
    ? 0 // anything `never` is false
    : A1 extends A2
    ? 1
    : 0

  export type Has<U extends Union, U1 extends Union> = Not<
    Extends<Exclude<U1, U>, U1>
  >

  export type Or<B1 extends Boolean, B2 extends Boolean> = {
    0: {
      0: 0
      1: 1
    }
    1: {
      0: 1
      1: 1
    }
  }[B1][B2]

  export type Keys<U extends Union> = U extends unknown ? keyof U : never



  /**
   * Used by group by
   */

  export type GetScalarType<T, O> = O extends object ? {
    [P in keyof T]: P extends keyof O
      ? O[P]
      : never
  } : never

  type FieldPaths<
    T,
    U = Omit<T, 'avg' | 'sum' | 'count' | 'min' | 'max'>
  > = IsObject<T> extends True ? U : T

  type GetHavingFields<T> = {
    [K in keyof T]: Or<
      Or<Extends<'OR', K>, Extends<'AND', K>>,
      Extends<'NOT', K>
    > extends True
      ? // infer is only needed to not hit TS limit
        // based on the brilliant idea of Pierre-Antoine Mills
        // https://github.com/microsoft/TypeScript/issues/30188#issuecomment-478938437
        T[K] extends infer TK
        ? GetHavingFields<UnEnumerate<TK> extends object ? Merge<UnEnumerate<TK>> : never>
        : never
      : {} extends FieldPaths<T[K]>
      ? never
      : K
  }[keyof T]

  /**
   * Convert tuple to union
   */
  type _TupleToUnion<T> = T extends (infer E)[] ? E : never
  type TupleToUnion<K extends readonly any[]> = _TupleToUnion<K>
  type MaybeTupleToUnion<T> = T extends any[] ? TupleToUnion<T> : T

  /**
   * Like `Pick`, but with an array
   */
  type PickArray<T, K extends Array<keyof T>> = Pick<T, TupleToUnion<K>>

  class PrismaClientFetcher {
    private readonly prisma;
    private readonly debug;
    private readonly hooks?;
    constructor(prisma: PrismaClient<any, any>, debug?: boolean, hooks?: Hooks | undefined);
    request<T>(document: any, dataPath?: string[], rootField?: string, typeName?: string, isList?: boolean, callsite?: string): Promise<T>;
    sanitizeMessage(message: string): string;
    protected unpack(document: any, data: any, path: string[], rootField?: string, isList?: boolean): any;
  }

  export const ModelName: {
    Movie: 'Movie',
    User: 'User',
    Photo: 'Photo',
    Hashtag: 'Hashtag',
    Like: 'Like',
    Comment: 'Comment'
  };

  export type ModelName = (typeof ModelName)[keyof typeof ModelName]


  export type Datasources = {
    db?: Datasource
  }

  export type ErrorFormat = 'pretty' | 'colorless' | 'minimal'

  export interface PrismaClientOptions {
    /**
     * Overwrites the datasource url from your prisma.schema file
     */
    datasources?: Datasources

    /**
     * @default "colorless"
     */
    errorFormat?: ErrorFormat

    /**
     * @example
     * ```
     * // Defaults to stdout
     * log: ['query', 'info', 'warn', 'error']
     * 
     * // Emit as events
     * log: [
     *  { emit: 'stdout', level: 'query' },
     *  { emit: 'stdout', level: 'info' },
     *  { emit: 'stdout', level: 'warn' }
     *  { emit: 'stdout', level: 'error' }
     * ]
     * ```
     * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/logging#the-log-option).
     */
    log?: Array<LogLevel | LogDefinition>
  }

  export type Hooks = {
    beforeRequest?: (options: { query: string, path: string[], rootField?: string, typeName?: string, document: any }) => any
  }

  /* Types for Logging */
  export type LogLevel = 'info' | 'query' | 'warn' | 'error'
  export type LogDefinition = {
    level: LogLevel
    emit: 'stdout' | 'event'
  }

  export type GetLogType<T extends LogLevel | LogDefinition> = T extends LogDefinition ? T['emit'] extends 'event' ? T['level'] : never : never
  export type GetEvents<T extends any> = T extends Array<LogLevel | LogDefinition> ?
    GetLogType<T[0]> | GetLogType<T[1]> | GetLogType<T[2]> | GetLogType<T[3]>
    : never

  export type QueryEvent = {
    timestamp: Date
    query: string
    params: string
    duration: number
    target: string
  }

  export type LogEvent = {
    timestamp: Date
    message: string
    target: string
  }
  /* End Types for Logging */


  export type PrismaAction =
    | 'findUnique'
    | 'findMany'
    | 'findFirst'
    | 'create'
    | 'update'
    | 'updateMany'
    | 'upsert'
    | 'delete'
    | 'deleteMany'
    | 'executeRaw'
    | 'queryRaw'
    | 'aggregate'
    | 'count'

  /**
   * These options are being passed in to the middleware as "params"
   */
  export type MiddlewareParams = {
    model?: ModelName
    action: PrismaAction
    args: any
    dataPath: string[]
    runInTransaction: boolean
  }

  /**
   * The `T` type makes sure, that the `return proceed` is not forgotten in the middleware implementation
   */
  export type Middleware<T = any> = (
    params: MiddlewareParams,
    next: (params: MiddlewareParams) => Promise<T>,
  ) => Promise<T>

  // tested in getLogLevel.test.ts
  export function getLogLevel(log: Array<LogLevel | LogDefinition>): LogLevel | undefined; 
  export type Datasource = {
    url?: string
  }


  /**
   * Model Movie
   */


  export type AggregateMovie = {
    count: number | null
    avg: MovieAvgAggregateOutputType | null
    sum: MovieSumAggregateOutputType | null
    min: MovieMinAggregateOutputType | null
    max: MovieMaxAggregateOutputType | null
  }

  export type MovieAvgAggregateOutputType = {
    id: number
    year: number
  }

  export type MovieSumAggregateOutputType = {
    id: number
    year: number
  }

  export type MovieMinAggregateOutputType = {
    id: number
    title: string | null
    year: number
    genre: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type MovieMaxAggregateOutputType = {
    id: number
    title: string | null
    year: number
    genre: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type MovieCountAggregateOutputType = {
    id: number
    title: number | null
    year: number
    genre: number | null
    createdAt: number | null
    updatedAt: number | null
    _all: number
  }


  export type MovieAvgAggregateInputType = {
    id?: true
    year?: true
  }

  export type MovieSumAggregateInputType = {
    id?: true
    year?: true
  }

  export type MovieMinAggregateInputType = {
    id?: true
    title?: true
    year?: true
    genre?: true
    createdAt?: true
    updatedAt?: true
  }

  export type MovieMaxAggregateInputType = {
    id?: true
    title?: true
    year?: true
    genre?: true
    createdAt?: true
    updatedAt?: true
  }

  export type MovieCountAggregateInputType = {
    id?: true
    title?: true
    year?: true
    genre?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type AggregateMovieArgs = {
    /**
     * Filter which Movie to aggregate.
    **/
    where?: MovieWhereInput
    /**
     * @link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs
     * 
     * Determine the order of Movies to fetch.
    **/
    orderBy?: Enumerable<MovieOrderByInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
    **/
    cursor?: MovieWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Movies from the position of the cursor.
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Movies.
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Movies
    **/
    count?: true
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    avg?: MovieAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    sum?: MovieSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    min?: MovieMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    max?: MovieMaxAggregateInputType
  }

  export type GetMovieAggregateType<T extends AggregateMovieArgs> = {
    [P in keyof T]: P extends 'count' ? number : GetMovieAggregateScalarType<T[P]>
  }

  export type GetMovieAggregateScalarType<T extends any> = {
    [P in keyof T]: P extends keyof MovieAvgAggregateOutputType ? MovieAvgAggregateOutputType[P] : never
  }

    



  export type MovieSelect = {
    id?: boolean
    title?: boolean
    year?: boolean
    genre?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type MovieGetPayload<
    S extends boolean | null | undefined | MovieArgs,
    U = keyof S
      > = S extends true
        ? Movie
    : S extends undefined
    ? never
    : S extends MovieArgs | FindManyMovieArgs
    ?'include' extends U
    ? Movie 
    : 'select' extends U
    ? {
    [P in TrueKeys<S['select']>]: P extends keyof Movie ?Movie [P]
  : 
     never
  } 
    : Movie
  : Movie


  export interface MovieDelegate {
    /**
     * Find zero or one Movie that matches the filter.
     * @param {FindUniqueMovieArgs} args - Arguments to find a Movie
     * @example
     * // Get one Movie
     * const movie = await prisma.movie.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends FindUniqueMovieArgs>(
      args: Subset<T, FindUniqueMovieArgs>
    ): CheckSelect<T, Prisma__MovieClient<Movie | null>, Prisma__MovieClient<MovieGetPayload<T> | null>>

    /**
     * Find the first Movie that matches the filter.
     * @param {FindFirstMovieArgs} args - Arguments to find a Movie
     * @example
     * // Get one Movie
     * const movie = await prisma.movie.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends FindFirstMovieArgs>(
      args?: Subset<T, FindFirstMovieArgs>
    ): CheckSelect<T, Prisma__MovieClient<Movie | null>, Prisma__MovieClient<MovieGetPayload<T> | null>>

    /**
     * Find zero or more Movies that matches the filter.
     * @param {FindManyMovieArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Movies
     * const movies = await prisma.movie.findMany()
     * 
     * // Get first 10 Movies
     * const movies = await prisma.movie.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const movieWithIdOnly = await prisma.movie.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends FindManyMovieArgs>(
      args?: Subset<T, FindManyMovieArgs>
    ): CheckSelect<T, Promise<Array<Movie>>, Promise<Array<MovieGetPayload<T>>>>

    /**
     * Create a Movie.
     * @param {MovieCreateArgs} args - Arguments to create a Movie.
     * @example
     * // Create one Movie
     * const Movie = await prisma.movie.create({
     *   data: {
     *     // ... data to create a Movie
     *   }
     * })
     * 
    **/
    create<T extends MovieCreateArgs>(
      args: Subset<T, MovieCreateArgs>
    ): CheckSelect<T, Prisma__MovieClient<Movie>, Prisma__MovieClient<MovieGetPayload<T>>>

    /**
     * Delete a Movie.
     * @param {MovieDeleteArgs} args - Arguments to delete one Movie.
     * @example
     * // Delete one Movie
     * const Movie = await prisma.movie.delete({
     *   where: {
     *     // ... filter to delete one Movie
     *   }
     * })
     * 
    **/
    delete<T extends MovieDeleteArgs>(
      args: Subset<T, MovieDeleteArgs>
    ): CheckSelect<T, Prisma__MovieClient<Movie>, Prisma__MovieClient<MovieGetPayload<T>>>

    /**
     * Update one Movie.
     * @param {MovieUpdateArgs} args - Arguments to update one Movie.
     * @example
     * // Update one Movie
     * const movie = await prisma.movie.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends MovieUpdateArgs>(
      args: Subset<T, MovieUpdateArgs>
    ): CheckSelect<T, Prisma__MovieClient<Movie>, Prisma__MovieClient<MovieGetPayload<T>>>

    /**
     * Delete zero or more Movies.
     * @param {MovieDeleteManyArgs} args - Arguments to filter Movies to delete.
     * @example
     * // Delete a few Movies
     * const { count } = await prisma.movie.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends MovieDeleteManyArgs>(
      args?: Subset<T, MovieDeleteManyArgs>
    ): Promise<BatchPayload>

    /**
     * Update zero or more Movies.
     * @param {MovieUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Movies
     * const movie = await prisma.movie.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends MovieUpdateManyArgs>(
      args: Subset<T, MovieUpdateManyArgs>
    ): Promise<BatchPayload>

    /**
     * Create or update one Movie.
     * @param {MovieUpsertArgs} args - Arguments to update or create a Movie.
     * @example
     * // Update or create a Movie
     * const movie = await prisma.movie.upsert({
     *   create: {
     *     // ... data to create a Movie
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Movie we want to update
     *   }
     * })
    **/
    upsert<T extends MovieUpsertArgs>(
      args: Subset<T, MovieUpsertArgs>
    ): CheckSelect<T, Prisma__MovieClient<Movie>, Prisma__MovieClient<MovieGetPayload<T>>>

    /**
     * Find zero or one Movie that matches the filter.
     * @param {FindUniqueMovieArgs} args - Arguments to find a Movie
     * @deprecated This will be deprecated please use prisma.movie.findUnique
     * @example
     * // Get one Movie
     * const movie = await prisma.movie.findOne({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findOne<T extends FindUniqueMovieArgs>(
      args: Subset<T, FindUniqueMovieArgs>
    ): CheckSelect<T, Prisma__MovieClient<Movie | null>, Prisma__MovieClient<MovieGetPayload<T> | null>>

    /**
     * Count the number of Movies.
     * @param {FindManyMovieArgs} args - Arguments to filter Movies to count.
     * @example
     * // Count the number of Movies
     * const count = await prisma.movie.count({
     *   where: {
     *     // ... the filter for the Movies we want to count
     *   }
     * })
    **/
    count(args?: Omit<FindManyMovieArgs, 'select' | 'include'>): Promise<number>

    /**
     * Allows you to perform aggregations operations on a Movie.
     * @param {AggregateMovieArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends AggregateMovieArgs>(args: Subset<T, AggregateMovieArgs>): Promise<GetMovieAggregateType<T>>


  }

  /**
   * The delegate class that acts as a "Promise-like" for Movie.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in 
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__MovieClient<T> implements Promise<T> {
    private readonly _dmmf;
    private readonly _fetcher;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    constructor(_dmmf: runtime.DMMFClass, _fetcher: PrismaClientFetcher, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);
    readonly [Symbol.toStringTag]: 'PrismaClientPromise';


    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | Promise<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | Promise<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | Promise<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }

  // Custom InputTypes

  /**
   * Movie findUnique
   */
  export type FindUniqueMovieArgs = {
    /**
     * Select specific fields to fetch from the Movie
    **/
    select?: MovieSelect | null
    /**
     * Filter, which Movie to fetch.
    **/
    where: MovieWhereUniqueInput
  }


  /**
   * Movie findFirst
   */
  export type FindFirstMovieArgs = {
    /**
     * Select specific fields to fetch from the Movie
    **/
    select?: MovieSelect | null
    /**
     * Filter, which Movie to fetch.
    **/
    where?: MovieWhereInput
    /**
     * @link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs
     * 
     * Determine the order of Movies to fetch.
    **/
    orderBy?: Enumerable<MovieOrderByInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Movies.
    **/
    cursor?: MovieWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Movies from the position of the cursor.
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Movies.
    **/
    skip?: number
    /**
     * @link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs
     * 
     * Filter by unique combinations of Movies.
    **/
    distinct?: Enumerable<MovieScalarFieldEnum>
  }


  /**
   * Movie findMany
   */
  export type FindManyMovieArgs = {
    /**
     * Select specific fields to fetch from the Movie
    **/
    select?: MovieSelect | null
    /**
     * Filter, which Movies to fetch.
    **/
    where?: MovieWhereInput
    /**
     * @link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs
     * 
     * Determine the order of Movies to fetch.
    **/
    orderBy?: Enumerable<MovieOrderByInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Movies.
    **/
    cursor?: MovieWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Movies from the position of the cursor.
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Movies.
    **/
    skip?: number
    distinct?: Enumerable<MovieScalarFieldEnum>
  }


  /**
   * Movie create
   */
  export type MovieCreateArgs = {
    /**
     * Select specific fields to fetch from the Movie
    **/
    select?: MovieSelect | null
    /**
     * The data needed to create a Movie.
    **/
    data: MovieCreateInput
  }


  /**
   * Movie update
   */
  export type MovieUpdateArgs = {
    /**
     * Select specific fields to fetch from the Movie
    **/
    select?: MovieSelect | null
    /**
     * The data needed to update a Movie.
    **/
    data: MovieUpdateInput
    /**
     * Choose, which Movie to update.
    **/
    where: MovieWhereUniqueInput
  }


  /**
   * Movie updateMany
   */
  export type MovieUpdateManyArgs = {
    data: MovieUpdateManyMutationInput
    where?: MovieWhereInput
  }


  /**
   * Movie upsert
   */
  export type MovieUpsertArgs = {
    /**
     * Select specific fields to fetch from the Movie
    **/
    select?: MovieSelect | null
    /**
     * The filter to search for the Movie to update in case it exists.
    **/
    where: MovieWhereUniqueInput
    /**
     * In case the Movie found by the `where` argument doesn't exist, create a new Movie with this data.
    **/
    create: MovieCreateInput
    /**
     * In case the Movie was found with the provided `where` argument, update it with this data.
    **/
    update: MovieUpdateInput
  }


  /**
   * Movie delete
   */
  export type MovieDeleteArgs = {
    /**
     * Select specific fields to fetch from the Movie
    **/
    select?: MovieSelect | null
    /**
     * Filter which Movie to delete.
    **/
    where: MovieWhereUniqueInput
  }


  /**
   * Movie deleteMany
   */
  export type MovieDeleteManyArgs = {
    where?: MovieWhereInput
  }


  /**
   * Movie without action
   */
  export type MovieArgs = {
    /**
     * Select specific fields to fetch from the Movie
    **/
    select?: MovieSelect | null
  }



  /**
   * Model User
   */


  export type AggregateUser = {
    count: number | null
    avg: UserAvgAggregateOutputType | null
    sum: UserSumAggregateOutputType | null
    min: UserMinAggregateOutputType | null
    max: UserMaxAggregateOutputType | null
  }

  export type UserAvgAggregateOutputType = {
    id: number
  }

  export type UserSumAggregateOutputType = {
    id: number
  }

  export type UserMinAggregateOutputType = {
    id: number
    firstName: string | null
    lastName: string | null
    username: string | null
    email: string | null
    password: string | null
    bio: string | null
    avatar: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type UserMaxAggregateOutputType = {
    id: number
    firstName: string | null
    lastName: string | null
    username: string | null
    email: string | null
    password: string | null
    bio: string | null
    avatar: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type UserCountAggregateOutputType = {
    id: number
    firstName: number | null
    lastName: number | null
    username: number | null
    email: number | null
    password: number | null
    bio: number | null
    avatar: number | null
    createdAt: number | null
    updatedAt: number | null
    _all: number
  }


  export type UserAvgAggregateInputType = {
    id?: true
  }

  export type UserSumAggregateInputType = {
    id?: true
  }

  export type UserMinAggregateInputType = {
    id?: true
    firstName?: true
    lastName?: true
    username?: true
    email?: true
    password?: true
    bio?: true
    avatar?: true
    createdAt?: true
    updatedAt?: true
  }

  export type UserMaxAggregateInputType = {
    id?: true
    firstName?: true
    lastName?: true
    username?: true
    email?: true
    password?: true
    bio?: true
    avatar?: true
    createdAt?: true
    updatedAt?: true
  }

  export type UserCountAggregateInputType = {
    id?: true
    firstName?: true
    lastName?: true
    username?: true
    email?: true
    password?: true
    bio?: true
    avatar?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type AggregateUserArgs = {
    /**
     * Filter which User to aggregate.
    **/
    where?: UserWhereInput
    /**
     * @link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs
     * 
     * Determine the order of Users to fetch.
    **/
    orderBy?: Enumerable<UserOrderByInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
    **/
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Users
    **/
    count?: true
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    avg?: UserAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    sum?: UserSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    min?: UserMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    max?: UserMaxAggregateInputType
  }

  export type GetUserAggregateType<T extends AggregateUserArgs> = {
    [P in keyof T]: P extends 'count' ? number : GetUserAggregateScalarType<T[P]>
  }

  export type GetUserAggregateScalarType<T extends any> = {
    [P in keyof T]: P extends keyof UserAvgAggregateOutputType ? UserAvgAggregateOutputType[P] : never
  }

    



  export type UserSelect = {
    id?: boolean
    firstName?: boolean
    lastName?: boolean
    username?: boolean
    email?: boolean
    password?: boolean
    bio?: boolean
    avatar?: boolean
    photos?: boolean | FindManyPhotoArgs
    likes?: boolean | FindManyLikeArgs
    comments?: boolean | FindManyCommentArgs
    followers?: boolean | FindManyUserArgs
    following?: boolean | FindManyUserArgs
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type UserInclude = {
    photos?: boolean | FindManyPhotoArgs
    likes?: boolean | FindManyLikeArgs
    comments?: boolean | FindManyCommentArgs
    followers?: boolean | FindManyUserArgs
    following?: boolean | FindManyUserArgs
  }

  export type UserGetPayload<
    S extends boolean | null | undefined | UserArgs,
    U = keyof S
      > = S extends true
        ? User
    : S extends undefined
    ? never
    : S extends UserArgs | FindManyUserArgs
    ?'include' extends U
    ? User  & {
    [P in TrueKeys<S['include']>]: 
          P extends 'photos'
        ? Array < PhotoGetPayload<S['include'][P]>>  :
        P extends 'likes'
        ? Array < LikeGetPayload<S['include'][P]>>  :
        P extends 'comments'
        ? Array < CommentGetPayload<S['include'][P]>>  :
        P extends 'followers'
        ? Array < UserGetPayload<S['include'][P]>>  :
        P extends 'following'
        ? Array < UserGetPayload<S['include'][P]>>  : never
  } 
    : 'select' extends U
    ? {
    [P in TrueKeys<S['select']>]: P extends keyof User ?User [P]
  : 
          P extends 'photos'
        ? Array < PhotoGetPayload<S['select'][P]>>  :
        P extends 'likes'
        ? Array < LikeGetPayload<S['select'][P]>>  :
        P extends 'comments'
        ? Array < CommentGetPayload<S['select'][P]>>  :
        P extends 'followers'
        ? Array < UserGetPayload<S['select'][P]>>  :
        P extends 'following'
        ? Array < UserGetPayload<S['select'][P]>>  : never
  } 
    : User
  : User


  export interface UserDelegate {
    /**
     * Find zero or one User that matches the filter.
     * @param {FindUniqueUserArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends FindUniqueUserArgs>(
      args: Subset<T, FindUniqueUserArgs>
    ): CheckSelect<T, Prisma__UserClient<User | null>, Prisma__UserClient<UserGetPayload<T> | null>>

    /**
     * Find the first User that matches the filter.
     * @param {FindFirstUserArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends FindFirstUserArgs>(
      args?: Subset<T, FindFirstUserArgs>
    ): CheckSelect<T, Prisma__UserClient<User | null>, Prisma__UserClient<UserGetPayload<T> | null>>

    /**
     * Find zero or more Users that matches the filter.
     * @param {FindManyUserArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Users
     * const users = await prisma.user.findMany()
     * 
     * // Get first 10 Users
     * const users = await prisma.user.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const userWithIdOnly = await prisma.user.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends FindManyUserArgs>(
      args?: Subset<T, FindManyUserArgs>
    ): CheckSelect<T, Promise<Array<User>>, Promise<Array<UserGetPayload<T>>>>

    /**
     * Create a User.
     * @param {UserCreateArgs} args - Arguments to create a User.
     * @example
     * // Create one User
     * const User = await prisma.user.create({
     *   data: {
     *     // ... data to create a User
     *   }
     * })
     * 
    **/
    create<T extends UserCreateArgs>(
      args: Subset<T, UserCreateArgs>
    ): CheckSelect<T, Prisma__UserClient<User>, Prisma__UserClient<UserGetPayload<T>>>

    /**
     * Delete a User.
     * @param {UserDeleteArgs} args - Arguments to delete one User.
     * @example
     * // Delete one User
     * const User = await prisma.user.delete({
     *   where: {
     *     // ... filter to delete one User
     *   }
     * })
     * 
    **/
    delete<T extends UserDeleteArgs>(
      args: Subset<T, UserDeleteArgs>
    ): CheckSelect<T, Prisma__UserClient<User>, Prisma__UserClient<UserGetPayload<T>>>

    /**
     * Update one User.
     * @param {UserUpdateArgs} args - Arguments to update one User.
     * @example
     * // Update one User
     * const user = await prisma.user.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends UserUpdateArgs>(
      args: Subset<T, UserUpdateArgs>
    ): CheckSelect<T, Prisma__UserClient<User>, Prisma__UserClient<UserGetPayload<T>>>

    /**
     * Delete zero or more Users.
     * @param {UserDeleteManyArgs} args - Arguments to filter Users to delete.
     * @example
     * // Delete a few Users
     * const { count } = await prisma.user.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends UserDeleteManyArgs>(
      args?: Subset<T, UserDeleteManyArgs>
    ): Promise<BatchPayload>

    /**
     * Update zero or more Users.
     * @param {UserUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Users
     * const user = await prisma.user.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends UserUpdateManyArgs>(
      args: Subset<T, UserUpdateManyArgs>
    ): Promise<BatchPayload>

    /**
     * Create or update one User.
     * @param {UserUpsertArgs} args - Arguments to update or create a User.
     * @example
     * // Update or create a User
     * const user = await prisma.user.upsert({
     *   create: {
     *     // ... data to create a User
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the User we want to update
     *   }
     * })
    **/
    upsert<T extends UserUpsertArgs>(
      args: Subset<T, UserUpsertArgs>
    ): CheckSelect<T, Prisma__UserClient<User>, Prisma__UserClient<UserGetPayload<T>>>

    /**
     * Find zero or one User that matches the filter.
     * @param {FindUniqueUserArgs} args - Arguments to find a User
     * @deprecated This will be deprecated please use prisma.user.findUnique
     * @example
     * // Get one User
     * const user = await prisma.user.findOne({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findOne<T extends FindUniqueUserArgs>(
      args: Subset<T, FindUniqueUserArgs>
    ): CheckSelect<T, Prisma__UserClient<User | null>, Prisma__UserClient<UserGetPayload<T> | null>>

    /**
     * Count the number of Users.
     * @param {FindManyUserArgs} args - Arguments to filter Users to count.
     * @example
     * // Count the number of Users
     * const count = await prisma.user.count({
     *   where: {
     *     // ... the filter for the Users we want to count
     *   }
     * })
    **/
    count(args?: Omit<FindManyUserArgs, 'select' | 'include'>): Promise<number>

    /**
     * Allows you to perform aggregations operations on a User.
     * @param {AggregateUserArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends AggregateUserArgs>(args: Subset<T, AggregateUserArgs>): Promise<GetUserAggregateType<T>>


  }

  /**
   * The delegate class that acts as a "Promise-like" for User.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in 
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__UserClient<T> implements Promise<T> {
    private readonly _dmmf;
    private readonly _fetcher;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    constructor(_dmmf: runtime.DMMFClass, _fetcher: PrismaClientFetcher, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);
    readonly [Symbol.toStringTag]: 'PrismaClientPromise';

    photos<T extends FindManyPhotoArgs = {}>(args?: Subset<T, FindManyPhotoArgs>): CheckSelect<T, Promise<Array<Photo>>, Promise<Array<PhotoGetPayload<T>>>>;

    likes<T extends FindManyLikeArgs = {}>(args?: Subset<T, FindManyLikeArgs>): CheckSelect<T, Promise<Array<Like>>, Promise<Array<LikeGetPayload<T>>>>;

    comments<T extends FindManyCommentArgs = {}>(args?: Subset<T, FindManyCommentArgs>): CheckSelect<T, Promise<Array<Comment>>, Promise<Array<CommentGetPayload<T>>>>;

    followers<T extends FindManyUserArgs = {}>(args?: Subset<T, FindManyUserArgs>): CheckSelect<T, Promise<Array<User>>, Promise<Array<UserGetPayload<T>>>>;

    following<T extends FindManyUserArgs = {}>(args?: Subset<T, FindManyUserArgs>): CheckSelect<T, Promise<Array<User>>, Promise<Array<UserGetPayload<T>>>>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | Promise<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | Promise<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | Promise<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }

  // Custom InputTypes

  /**
   * User findUnique
   */
  export type FindUniqueUserArgs = {
    /**
     * Select specific fields to fetch from the User
    **/
    select?: UserSelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: UserInclude | null
    /**
     * Filter, which User to fetch.
    **/
    where: UserWhereUniqueInput
  }


  /**
   * User findFirst
   */
  export type FindFirstUserArgs = {
    /**
     * Select specific fields to fetch from the User
    **/
    select?: UserSelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: UserInclude | null
    /**
     * Filter, which User to fetch.
    **/
    where?: UserWhereInput
    /**
     * @link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs
     * 
     * Determine the order of Users to fetch.
    **/
    orderBy?: Enumerable<UserOrderByInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Users.
    **/
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
    **/
    skip?: number
    /**
     * @link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs
     * 
     * Filter by unique combinations of Users.
    **/
    distinct?: Enumerable<UserScalarFieldEnum>
  }


  /**
   * User findMany
   */
  export type FindManyUserArgs = {
    /**
     * Select specific fields to fetch from the User
    **/
    select?: UserSelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: UserInclude | null
    /**
     * Filter, which Users to fetch.
    **/
    where?: UserWhereInput
    /**
     * @link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs
     * 
     * Determine the order of Users to fetch.
    **/
    orderBy?: Enumerable<UserOrderByInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Users.
    **/
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
    **/
    skip?: number
    distinct?: Enumerable<UserScalarFieldEnum>
  }


  /**
   * User create
   */
  export type UserCreateArgs = {
    /**
     * Select specific fields to fetch from the User
    **/
    select?: UserSelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: UserInclude | null
    /**
     * The data needed to create a User.
    **/
    data: UserCreateInput
  }


  /**
   * User update
   */
  export type UserUpdateArgs = {
    /**
     * Select specific fields to fetch from the User
    **/
    select?: UserSelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: UserInclude | null
    /**
     * The data needed to update a User.
    **/
    data: UserUpdateInput
    /**
     * Choose, which User to update.
    **/
    where: UserWhereUniqueInput
  }


  /**
   * User updateMany
   */
  export type UserUpdateManyArgs = {
    data: UserUpdateManyMutationInput
    where?: UserWhereInput
  }


  /**
   * User upsert
   */
  export type UserUpsertArgs = {
    /**
     * Select specific fields to fetch from the User
    **/
    select?: UserSelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: UserInclude | null
    /**
     * The filter to search for the User to update in case it exists.
    **/
    where: UserWhereUniqueInput
    /**
     * In case the User found by the `where` argument doesn't exist, create a new User with this data.
    **/
    create: UserCreateInput
    /**
     * In case the User was found with the provided `where` argument, update it with this data.
    **/
    update: UserUpdateInput
  }


  /**
   * User delete
   */
  export type UserDeleteArgs = {
    /**
     * Select specific fields to fetch from the User
    **/
    select?: UserSelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: UserInclude | null
    /**
     * Filter which User to delete.
    **/
    where: UserWhereUniqueInput
  }


  /**
   * User deleteMany
   */
  export type UserDeleteManyArgs = {
    where?: UserWhereInput
  }


  /**
   * User without action
   */
  export type UserArgs = {
    /**
     * Select specific fields to fetch from the User
    **/
    select?: UserSelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: UserInclude | null
  }



  /**
   * Model Photo
   */


  export type AggregatePhoto = {
    count: number | null
    avg: PhotoAvgAggregateOutputType | null
    sum: PhotoSumAggregateOutputType | null
    min: PhotoMinAggregateOutputType | null
    max: PhotoMaxAggregateOutputType | null
  }

  export type PhotoAvgAggregateOutputType = {
    id: number
    userId: number
  }

  export type PhotoSumAggregateOutputType = {
    id: number
    userId: number
  }

  export type PhotoMinAggregateOutputType = {
    id: number
    userId: number
    file: string | null
    caption: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type PhotoMaxAggregateOutputType = {
    id: number
    userId: number
    file: string | null
    caption: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type PhotoCountAggregateOutputType = {
    id: number
    userId: number
    file: number | null
    caption: number | null
    createdAt: number | null
    updatedAt: number | null
    _all: number
  }


  export type PhotoAvgAggregateInputType = {
    id?: true
    userId?: true
  }

  export type PhotoSumAggregateInputType = {
    id?: true
    userId?: true
  }

  export type PhotoMinAggregateInputType = {
    id?: true
    userId?: true
    file?: true
    caption?: true
    createdAt?: true
    updatedAt?: true
  }

  export type PhotoMaxAggregateInputType = {
    id?: true
    userId?: true
    file?: true
    caption?: true
    createdAt?: true
    updatedAt?: true
  }

  export type PhotoCountAggregateInputType = {
    id?: true
    userId?: true
    file?: true
    caption?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type AggregatePhotoArgs = {
    /**
     * Filter which Photo to aggregate.
    **/
    where?: PhotoWhereInput
    /**
     * @link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs
     * 
     * Determine the order of Photos to fetch.
    **/
    orderBy?: Enumerable<PhotoOrderByInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
    **/
    cursor?: PhotoWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Photos from the position of the cursor.
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Photos.
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Photos
    **/
    count?: true
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    avg?: PhotoAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    sum?: PhotoSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    min?: PhotoMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    max?: PhotoMaxAggregateInputType
  }

  export type GetPhotoAggregateType<T extends AggregatePhotoArgs> = {
    [P in keyof T]: P extends 'count' ? number : GetPhotoAggregateScalarType<T[P]>
  }

  export type GetPhotoAggregateScalarType<T extends any> = {
    [P in keyof T]: P extends keyof PhotoAvgAggregateOutputType ? PhotoAvgAggregateOutputType[P] : never
  }

    



  export type PhotoSelect = {
    id?: boolean
    user?: boolean | UserArgs
    userId?: boolean
    file?: boolean
    caption?: boolean
    hashtags?: boolean | FindManyHashtagArgs
    likes?: boolean | FindManyLikeArgs
    comments?: boolean | FindManyCommentArgs
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type PhotoInclude = {
    user?: boolean | UserArgs
    hashtags?: boolean | FindManyHashtagArgs
    likes?: boolean | FindManyLikeArgs
    comments?: boolean | FindManyCommentArgs
  }

  export type PhotoGetPayload<
    S extends boolean | null | undefined | PhotoArgs,
    U = keyof S
      > = S extends true
        ? Photo
    : S extends undefined
    ? never
    : S extends PhotoArgs | FindManyPhotoArgs
    ?'include' extends U
    ? Photo  & {
    [P in TrueKeys<S['include']>]: 
          P extends 'user'
        ? UserGetPayload<S['include'][P]> :
        P extends 'hashtags'
        ? Array < HashtagGetPayload<S['include'][P]>>  :
        P extends 'likes'
        ? Array < LikeGetPayload<S['include'][P]>>  :
        P extends 'comments'
        ? Array < CommentGetPayload<S['include'][P]>>  : never
  } 
    : 'select' extends U
    ? {
    [P in TrueKeys<S['select']>]: P extends keyof Photo ?Photo [P]
  : 
          P extends 'user'
        ? UserGetPayload<S['select'][P]> :
        P extends 'hashtags'
        ? Array < HashtagGetPayload<S['select'][P]>>  :
        P extends 'likes'
        ? Array < LikeGetPayload<S['select'][P]>>  :
        P extends 'comments'
        ? Array < CommentGetPayload<S['select'][P]>>  : never
  } 
    : Photo
  : Photo


  export interface PhotoDelegate {
    /**
     * Find zero or one Photo that matches the filter.
     * @param {FindUniquePhotoArgs} args - Arguments to find a Photo
     * @example
     * // Get one Photo
     * const photo = await prisma.photo.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends FindUniquePhotoArgs>(
      args: Subset<T, FindUniquePhotoArgs>
    ): CheckSelect<T, Prisma__PhotoClient<Photo | null>, Prisma__PhotoClient<PhotoGetPayload<T> | null>>

    /**
     * Find the first Photo that matches the filter.
     * @param {FindFirstPhotoArgs} args - Arguments to find a Photo
     * @example
     * // Get one Photo
     * const photo = await prisma.photo.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends FindFirstPhotoArgs>(
      args?: Subset<T, FindFirstPhotoArgs>
    ): CheckSelect<T, Prisma__PhotoClient<Photo | null>, Prisma__PhotoClient<PhotoGetPayload<T> | null>>

    /**
     * Find zero or more Photos that matches the filter.
     * @param {FindManyPhotoArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Photos
     * const photos = await prisma.photo.findMany()
     * 
     * // Get first 10 Photos
     * const photos = await prisma.photo.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const photoWithIdOnly = await prisma.photo.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends FindManyPhotoArgs>(
      args?: Subset<T, FindManyPhotoArgs>
    ): CheckSelect<T, Promise<Array<Photo>>, Promise<Array<PhotoGetPayload<T>>>>

    /**
     * Create a Photo.
     * @param {PhotoCreateArgs} args - Arguments to create a Photo.
     * @example
     * // Create one Photo
     * const Photo = await prisma.photo.create({
     *   data: {
     *     // ... data to create a Photo
     *   }
     * })
     * 
    **/
    create<T extends PhotoCreateArgs>(
      args: Subset<T, PhotoCreateArgs>
    ): CheckSelect<T, Prisma__PhotoClient<Photo>, Prisma__PhotoClient<PhotoGetPayload<T>>>

    /**
     * Delete a Photo.
     * @param {PhotoDeleteArgs} args - Arguments to delete one Photo.
     * @example
     * // Delete one Photo
     * const Photo = await prisma.photo.delete({
     *   where: {
     *     // ... filter to delete one Photo
     *   }
     * })
     * 
    **/
    delete<T extends PhotoDeleteArgs>(
      args: Subset<T, PhotoDeleteArgs>
    ): CheckSelect<T, Prisma__PhotoClient<Photo>, Prisma__PhotoClient<PhotoGetPayload<T>>>

    /**
     * Update one Photo.
     * @param {PhotoUpdateArgs} args - Arguments to update one Photo.
     * @example
     * // Update one Photo
     * const photo = await prisma.photo.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends PhotoUpdateArgs>(
      args: Subset<T, PhotoUpdateArgs>
    ): CheckSelect<T, Prisma__PhotoClient<Photo>, Prisma__PhotoClient<PhotoGetPayload<T>>>

    /**
     * Delete zero or more Photos.
     * @param {PhotoDeleteManyArgs} args - Arguments to filter Photos to delete.
     * @example
     * // Delete a few Photos
     * const { count } = await prisma.photo.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends PhotoDeleteManyArgs>(
      args?: Subset<T, PhotoDeleteManyArgs>
    ): Promise<BatchPayload>

    /**
     * Update zero or more Photos.
     * @param {PhotoUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Photos
     * const photo = await prisma.photo.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends PhotoUpdateManyArgs>(
      args: Subset<T, PhotoUpdateManyArgs>
    ): Promise<BatchPayload>

    /**
     * Create or update one Photo.
     * @param {PhotoUpsertArgs} args - Arguments to update or create a Photo.
     * @example
     * // Update or create a Photo
     * const photo = await prisma.photo.upsert({
     *   create: {
     *     // ... data to create a Photo
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Photo we want to update
     *   }
     * })
    **/
    upsert<T extends PhotoUpsertArgs>(
      args: Subset<T, PhotoUpsertArgs>
    ): CheckSelect<T, Prisma__PhotoClient<Photo>, Prisma__PhotoClient<PhotoGetPayload<T>>>

    /**
     * Find zero or one Photo that matches the filter.
     * @param {FindUniquePhotoArgs} args - Arguments to find a Photo
     * @deprecated This will be deprecated please use prisma.photo.findUnique
     * @example
     * // Get one Photo
     * const photo = await prisma.photo.findOne({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findOne<T extends FindUniquePhotoArgs>(
      args: Subset<T, FindUniquePhotoArgs>
    ): CheckSelect<T, Prisma__PhotoClient<Photo | null>, Prisma__PhotoClient<PhotoGetPayload<T> | null>>

    /**
     * Count the number of Photos.
     * @param {FindManyPhotoArgs} args - Arguments to filter Photos to count.
     * @example
     * // Count the number of Photos
     * const count = await prisma.photo.count({
     *   where: {
     *     // ... the filter for the Photos we want to count
     *   }
     * })
    **/
    count(args?: Omit<FindManyPhotoArgs, 'select' | 'include'>): Promise<number>

    /**
     * Allows you to perform aggregations operations on a Photo.
     * @param {AggregatePhotoArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends AggregatePhotoArgs>(args: Subset<T, AggregatePhotoArgs>): Promise<GetPhotoAggregateType<T>>


  }

  /**
   * The delegate class that acts as a "Promise-like" for Photo.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in 
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__PhotoClient<T> implements Promise<T> {
    private readonly _dmmf;
    private readonly _fetcher;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    constructor(_dmmf: runtime.DMMFClass, _fetcher: PrismaClientFetcher, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);
    readonly [Symbol.toStringTag]: 'PrismaClientPromise';

    user<T extends UserArgs = {}>(args?: Subset<T, UserArgs>): CheckSelect<T, Prisma__UserClient<User | null>, Prisma__UserClient<UserGetPayload<T> | null>>;

    hashtags<T extends FindManyHashtagArgs = {}>(args?: Subset<T, FindManyHashtagArgs>): CheckSelect<T, Promise<Array<Hashtag>>, Promise<Array<HashtagGetPayload<T>>>>;

    likes<T extends FindManyLikeArgs = {}>(args?: Subset<T, FindManyLikeArgs>): CheckSelect<T, Promise<Array<Like>>, Promise<Array<LikeGetPayload<T>>>>;

    comments<T extends FindManyCommentArgs = {}>(args?: Subset<T, FindManyCommentArgs>): CheckSelect<T, Promise<Array<Comment>>, Promise<Array<CommentGetPayload<T>>>>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | Promise<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | Promise<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | Promise<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }

  // Custom InputTypes

  /**
   * Photo findUnique
   */
  export type FindUniquePhotoArgs = {
    /**
     * Select specific fields to fetch from the Photo
    **/
    select?: PhotoSelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: PhotoInclude | null
    /**
     * Filter, which Photo to fetch.
    **/
    where: PhotoWhereUniqueInput
  }


  /**
   * Photo findFirst
   */
  export type FindFirstPhotoArgs = {
    /**
     * Select specific fields to fetch from the Photo
    **/
    select?: PhotoSelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: PhotoInclude | null
    /**
     * Filter, which Photo to fetch.
    **/
    where?: PhotoWhereInput
    /**
     * @link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs
     * 
     * Determine the order of Photos to fetch.
    **/
    orderBy?: Enumerable<PhotoOrderByInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Photos.
    **/
    cursor?: PhotoWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Photos from the position of the cursor.
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Photos.
    **/
    skip?: number
    /**
     * @link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs
     * 
     * Filter by unique combinations of Photos.
    **/
    distinct?: Enumerable<PhotoScalarFieldEnum>
  }


  /**
   * Photo findMany
   */
  export type FindManyPhotoArgs = {
    /**
     * Select specific fields to fetch from the Photo
    **/
    select?: PhotoSelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: PhotoInclude | null
    /**
     * Filter, which Photos to fetch.
    **/
    where?: PhotoWhereInput
    /**
     * @link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs
     * 
     * Determine the order of Photos to fetch.
    **/
    orderBy?: Enumerable<PhotoOrderByInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Photos.
    **/
    cursor?: PhotoWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Photos from the position of the cursor.
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Photos.
    **/
    skip?: number
    distinct?: Enumerable<PhotoScalarFieldEnum>
  }


  /**
   * Photo create
   */
  export type PhotoCreateArgs = {
    /**
     * Select specific fields to fetch from the Photo
    **/
    select?: PhotoSelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: PhotoInclude | null
    /**
     * The data needed to create a Photo.
    **/
    data: PhotoCreateInput
  }


  /**
   * Photo update
   */
  export type PhotoUpdateArgs = {
    /**
     * Select specific fields to fetch from the Photo
    **/
    select?: PhotoSelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: PhotoInclude | null
    /**
     * The data needed to update a Photo.
    **/
    data: PhotoUpdateInput
    /**
     * Choose, which Photo to update.
    **/
    where: PhotoWhereUniqueInput
  }


  /**
   * Photo updateMany
   */
  export type PhotoUpdateManyArgs = {
    data: PhotoUpdateManyMutationInput
    where?: PhotoWhereInput
  }


  /**
   * Photo upsert
   */
  export type PhotoUpsertArgs = {
    /**
     * Select specific fields to fetch from the Photo
    **/
    select?: PhotoSelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: PhotoInclude | null
    /**
     * The filter to search for the Photo to update in case it exists.
    **/
    where: PhotoWhereUniqueInput
    /**
     * In case the Photo found by the `where` argument doesn't exist, create a new Photo with this data.
    **/
    create: PhotoCreateInput
    /**
     * In case the Photo was found with the provided `where` argument, update it with this data.
    **/
    update: PhotoUpdateInput
  }


  /**
   * Photo delete
   */
  export type PhotoDeleteArgs = {
    /**
     * Select specific fields to fetch from the Photo
    **/
    select?: PhotoSelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: PhotoInclude | null
    /**
     * Filter which Photo to delete.
    **/
    where: PhotoWhereUniqueInput
  }


  /**
   * Photo deleteMany
   */
  export type PhotoDeleteManyArgs = {
    where?: PhotoWhereInput
  }


  /**
   * Photo without action
   */
  export type PhotoArgs = {
    /**
     * Select specific fields to fetch from the Photo
    **/
    select?: PhotoSelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: PhotoInclude | null
  }



  /**
   * Model Hashtag
   */


  export type AggregateHashtag = {
    count: number | null
    avg: HashtagAvgAggregateOutputType | null
    sum: HashtagSumAggregateOutputType | null
    min: HashtagMinAggregateOutputType | null
    max: HashtagMaxAggregateOutputType | null
  }

  export type HashtagAvgAggregateOutputType = {
    id: number
  }

  export type HashtagSumAggregateOutputType = {
    id: number
  }

  export type HashtagMinAggregateOutputType = {
    id: number
    hashtag: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type HashtagMaxAggregateOutputType = {
    id: number
    hashtag: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type HashtagCountAggregateOutputType = {
    id: number
    hashtag: number | null
    createdAt: number | null
    updatedAt: number | null
    _all: number
  }


  export type HashtagAvgAggregateInputType = {
    id?: true
  }

  export type HashtagSumAggregateInputType = {
    id?: true
  }

  export type HashtagMinAggregateInputType = {
    id?: true
    hashtag?: true
    createdAt?: true
    updatedAt?: true
  }

  export type HashtagMaxAggregateInputType = {
    id?: true
    hashtag?: true
    createdAt?: true
    updatedAt?: true
  }

  export type HashtagCountAggregateInputType = {
    id?: true
    hashtag?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type AggregateHashtagArgs = {
    /**
     * Filter which Hashtag to aggregate.
    **/
    where?: HashtagWhereInput
    /**
     * @link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs
     * 
     * Determine the order of Hashtags to fetch.
    **/
    orderBy?: Enumerable<HashtagOrderByInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
    **/
    cursor?: HashtagWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Hashtags from the position of the cursor.
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Hashtags.
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Hashtags
    **/
    count?: true
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    avg?: HashtagAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    sum?: HashtagSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    min?: HashtagMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    max?: HashtagMaxAggregateInputType
  }

  export type GetHashtagAggregateType<T extends AggregateHashtagArgs> = {
    [P in keyof T]: P extends 'count' ? number : GetHashtagAggregateScalarType<T[P]>
  }

  export type GetHashtagAggregateScalarType<T extends any> = {
    [P in keyof T]: P extends keyof HashtagAvgAggregateOutputType ? HashtagAvgAggregateOutputType[P] : never
  }

    



  export type HashtagSelect = {
    id?: boolean
    hashtag?: boolean
    photos?: boolean | FindManyPhotoArgs
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type HashtagInclude = {
    photos?: boolean | FindManyPhotoArgs
  }

  export type HashtagGetPayload<
    S extends boolean | null | undefined | HashtagArgs,
    U = keyof S
      > = S extends true
        ? Hashtag
    : S extends undefined
    ? never
    : S extends HashtagArgs | FindManyHashtagArgs
    ?'include' extends U
    ? Hashtag  & {
    [P in TrueKeys<S['include']>]: 
          P extends 'photos'
        ? Array < PhotoGetPayload<S['include'][P]>>  : never
  } 
    : 'select' extends U
    ? {
    [P in TrueKeys<S['select']>]: P extends keyof Hashtag ?Hashtag [P]
  : 
          P extends 'photos'
        ? Array < PhotoGetPayload<S['select'][P]>>  : never
  } 
    : Hashtag
  : Hashtag


  export interface HashtagDelegate {
    /**
     * Find zero or one Hashtag that matches the filter.
     * @param {FindUniqueHashtagArgs} args - Arguments to find a Hashtag
     * @example
     * // Get one Hashtag
     * const hashtag = await prisma.hashtag.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends FindUniqueHashtagArgs>(
      args: Subset<T, FindUniqueHashtagArgs>
    ): CheckSelect<T, Prisma__HashtagClient<Hashtag | null>, Prisma__HashtagClient<HashtagGetPayload<T> | null>>

    /**
     * Find the first Hashtag that matches the filter.
     * @param {FindFirstHashtagArgs} args - Arguments to find a Hashtag
     * @example
     * // Get one Hashtag
     * const hashtag = await prisma.hashtag.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends FindFirstHashtagArgs>(
      args?: Subset<T, FindFirstHashtagArgs>
    ): CheckSelect<T, Prisma__HashtagClient<Hashtag | null>, Prisma__HashtagClient<HashtagGetPayload<T> | null>>

    /**
     * Find zero or more Hashtags that matches the filter.
     * @param {FindManyHashtagArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Hashtags
     * const hashtags = await prisma.hashtag.findMany()
     * 
     * // Get first 10 Hashtags
     * const hashtags = await prisma.hashtag.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const hashtagWithIdOnly = await prisma.hashtag.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends FindManyHashtagArgs>(
      args?: Subset<T, FindManyHashtagArgs>
    ): CheckSelect<T, Promise<Array<Hashtag>>, Promise<Array<HashtagGetPayload<T>>>>

    /**
     * Create a Hashtag.
     * @param {HashtagCreateArgs} args - Arguments to create a Hashtag.
     * @example
     * // Create one Hashtag
     * const Hashtag = await prisma.hashtag.create({
     *   data: {
     *     // ... data to create a Hashtag
     *   }
     * })
     * 
    **/
    create<T extends HashtagCreateArgs>(
      args: Subset<T, HashtagCreateArgs>
    ): CheckSelect<T, Prisma__HashtagClient<Hashtag>, Prisma__HashtagClient<HashtagGetPayload<T>>>

    /**
     * Delete a Hashtag.
     * @param {HashtagDeleteArgs} args - Arguments to delete one Hashtag.
     * @example
     * // Delete one Hashtag
     * const Hashtag = await prisma.hashtag.delete({
     *   where: {
     *     // ... filter to delete one Hashtag
     *   }
     * })
     * 
    **/
    delete<T extends HashtagDeleteArgs>(
      args: Subset<T, HashtagDeleteArgs>
    ): CheckSelect<T, Prisma__HashtagClient<Hashtag>, Prisma__HashtagClient<HashtagGetPayload<T>>>

    /**
     * Update one Hashtag.
     * @param {HashtagUpdateArgs} args - Arguments to update one Hashtag.
     * @example
     * // Update one Hashtag
     * const hashtag = await prisma.hashtag.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends HashtagUpdateArgs>(
      args: Subset<T, HashtagUpdateArgs>
    ): CheckSelect<T, Prisma__HashtagClient<Hashtag>, Prisma__HashtagClient<HashtagGetPayload<T>>>

    /**
     * Delete zero or more Hashtags.
     * @param {HashtagDeleteManyArgs} args - Arguments to filter Hashtags to delete.
     * @example
     * // Delete a few Hashtags
     * const { count } = await prisma.hashtag.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends HashtagDeleteManyArgs>(
      args?: Subset<T, HashtagDeleteManyArgs>
    ): Promise<BatchPayload>

    /**
     * Update zero or more Hashtags.
     * @param {HashtagUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Hashtags
     * const hashtag = await prisma.hashtag.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends HashtagUpdateManyArgs>(
      args: Subset<T, HashtagUpdateManyArgs>
    ): Promise<BatchPayload>

    /**
     * Create or update one Hashtag.
     * @param {HashtagUpsertArgs} args - Arguments to update or create a Hashtag.
     * @example
     * // Update or create a Hashtag
     * const hashtag = await prisma.hashtag.upsert({
     *   create: {
     *     // ... data to create a Hashtag
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Hashtag we want to update
     *   }
     * })
    **/
    upsert<T extends HashtagUpsertArgs>(
      args: Subset<T, HashtagUpsertArgs>
    ): CheckSelect<T, Prisma__HashtagClient<Hashtag>, Prisma__HashtagClient<HashtagGetPayload<T>>>

    /**
     * Find zero or one Hashtag that matches the filter.
     * @param {FindUniqueHashtagArgs} args - Arguments to find a Hashtag
     * @deprecated This will be deprecated please use prisma.hashtag.findUnique
     * @example
     * // Get one Hashtag
     * const hashtag = await prisma.hashtag.findOne({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findOne<T extends FindUniqueHashtagArgs>(
      args: Subset<T, FindUniqueHashtagArgs>
    ): CheckSelect<T, Prisma__HashtagClient<Hashtag | null>, Prisma__HashtagClient<HashtagGetPayload<T> | null>>

    /**
     * Count the number of Hashtags.
     * @param {FindManyHashtagArgs} args - Arguments to filter Hashtags to count.
     * @example
     * // Count the number of Hashtags
     * const count = await prisma.hashtag.count({
     *   where: {
     *     // ... the filter for the Hashtags we want to count
     *   }
     * })
    **/
    count(args?: Omit<FindManyHashtagArgs, 'select' | 'include'>): Promise<number>

    /**
     * Allows you to perform aggregations operations on a Hashtag.
     * @param {AggregateHashtagArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends AggregateHashtagArgs>(args: Subset<T, AggregateHashtagArgs>): Promise<GetHashtagAggregateType<T>>


  }

  /**
   * The delegate class that acts as a "Promise-like" for Hashtag.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in 
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__HashtagClient<T> implements Promise<T> {
    private readonly _dmmf;
    private readonly _fetcher;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    constructor(_dmmf: runtime.DMMFClass, _fetcher: PrismaClientFetcher, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);
    readonly [Symbol.toStringTag]: 'PrismaClientPromise';

    photos<T extends FindManyPhotoArgs = {}>(args?: Subset<T, FindManyPhotoArgs>): CheckSelect<T, Promise<Array<Photo>>, Promise<Array<PhotoGetPayload<T>>>>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | Promise<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | Promise<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | Promise<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }

  // Custom InputTypes

  /**
   * Hashtag findUnique
   */
  export type FindUniqueHashtagArgs = {
    /**
     * Select specific fields to fetch from the Hashtag
    **/
    select?: HashtagSelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: HashtagInclude | null
    /**
     * Filter, which Hashtag to fetch.
    **/
    where: HashtagWhereUniqueInput
  }


  /**
   * Hashtag findFirst
   */
  export type FindFirstHashtagArgs = {
    /**
     * Select specific fields to fetch from the Hashtag
    **/
    select?: HashtagSelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: HashtagInclude | null
    /**
     * Filter, which Hashtag to fetch.
    **/
    where?: HashtagWhereInput
    /**
     * @link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs
     * 
     * Determine the order of Hashtags to fetch.
    **/
    orderBy?: Enumerable<HashtagOrderByInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Hashtags.
    **/
    cursor?: HashtagWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Hashtags from the position of the cursor.
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Hashtags.
    **/
    skip?: number
    /**
     * @link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs
     * 
     * Filter by unique combinations of Hashtags.
    **/
    distinct?: Enumerable<HashtagScalarFieldEnum>
  }


  /**
   * Hashtag findMany
   */
  export type FindManyHashtagArgs = {
    /**
     * Select specific fields to fetch from the Hashtag
    **/
    select?: HashtagSelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: HashtagInclude | null
    /**
     * Filter, which Hashtags to fetch.
    **/
    where?: HashtagWhereInput
    /**
     * @link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs
     * 
     * Determine the order of Hashtags to fetch.
    **/
    orderBy?: Enumerable<HashtagOrderByInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Hashtags.
    **/
    cursor?: HashtagWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Hashtags from the position of the cursor.
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Hashtags.
    **/
    skip?: number
    distinct?: Enumerable<HashtagScalarFieldEnum>
  }


  /**
   * Hashtag create
   */
  export type HashtagCreateArgs = {
    /**
     * Select specific fields to fetch from the Hashtag
    **/
    select?: HashtagSelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: HashtagInclude | null
    /**
     * The data needed to create a Hashtag.
    **/
    data: HashtagCreateInput
  }


  /**
   * Hashtag update
   */
  export type HashtagUpdateArgs = {
    /**
     * Select specific fields to fetch from the Hashtag
    **/
    select?: HashtagSelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: HashtagInclude | null
    /**
     * The data needed to update a Hashtag.
    **/
    data: HashtagUpdateInput
    /**
     * Choose, which Hashtag to update.
    **/
    where: HashtagWhereUniqueInput
  }


  /**
   * Hashtag updateMany
   */
  export type HashtagUpdateManyArgs = {
    data: HashtagUpdateManyMutationInput
    where?: HashtagWhereInput
  }


  /**
   * Hashtag upsert
   */
  export type HashtagUpsertArgs = {
    /**
     * Select specific fields to fetch from the Hashtag
    **/
    select?: HashtagSelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: HashtagInclude | null
    /**
     * The filter to search for the Hashtag to update in case it exists.
    **/
    where: HashtagWhereUniqueInput
    /**
     * In case the Hashtag found by the `where` argument doesn't exist, create a new Hashtag with this data.
    **/
    create: HashtagCreateInput
    /**
     * In case the Hashtag was found with the provided `where` argument, update it with this data.
    **/
    update: HashtagUpdateInput
  }


  /**
   * Hashtag delete
   */
  export type HashtagDeleteArgs = {
    /**
     * Select specific fields to fetch from the Hashtag
    **/
    select?: HashtagSelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: HashtagInclude | null
    /**
     * Filter which Hashtag to delete.
    **/
    where: HashtagWhereUniqueInput
  }


  /**
   * Hashtag deleteMany
   */
  export type HashtagDeleteManyArgs = {
    where?: HashtagWhereInput
  }


  /**
   * Hashtag without action
   */
  export type HashtagArgs = {
    /**
     * Select specific fields to fetch from the Hashtag
    **/
    select?: HashtagSelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: HashtagInclude | null
  }



  /**
   * Model Like
   */


  export type AggregateLike = {
    count: number | null
    avg: LikeAvgAggregateOutputType | null
    sum: LikeSumAggregateOutputType | null
    min: LikeMinAggregateOutputType | null
    max: LikeMaxAggregateOutputType | null
  }

  export type LikeAvgAggregateOutputType = {
    id: number
    photoId: number
    userId: number
  }

  export type LikeSumAggregateOutputType = {
    id: number
    photoId: number
    userId: number
  }

  export type LikeMinAggregateOutputType = {
    id: number
    photoId: number
    userId: number
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type LikeMaxAggregateOutputType = {
    id: number
    photoId: number
    userId: number
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type LikeCountAggregateOutputType = {
    id: number
    photoId: number
    userId: number
    createdAt: number | null
    updatedAt: number | null
    _all: number
  }


  export type LikeAvgAggregateInputType = {
    id?: true
    photoId?: true
    userId?: true
  }

  export type LikeSumAggregateInputType = {
    id?: true
    photoId?: true
    userId?: true
  }

  export type LikeMinAggregateInputType = {
    id?: true
    photoId?: true
    userId?: true
    createdAt?: true
    updatedAt?: true
  }

  export type LikeMaxAggregateInputType = {
    id?: true
    photoId?: true
    userId?: true
    createdAt?: true
    updatedAt?: true
  }

  export type LikeCountAggregateInputType = {
    id?: true
    photoId?: true
    userId?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type AggregateLikeArgs = {
    /**
     * Filter which Like to aggregate.
    **/
    where?: LikeWhereInput
    /**
     * @link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs
     * 
     * Determine the order of Likes to fetch.
    **/
    orderBy?: Enumerable<LikeOrderByInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
    **/
    cursor?: LikeWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Likes from the position of the cursor.
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Likes.
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Likes
    **/
    count?: true
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    avg?: LikeAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    sum?: LikeSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    min?: LikeMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    max?: LikeMaxAggregateInputType
  }

  export type GetLikeAggregateType<T extends AggregateLikeArgs> = {
    [P in keyof T]: P extends 'count' ? number : GetLikeAggregateScalarType<T[P]>
  }

  export type GetLikeAggregateScalarType<T extends any> = {
    [P in keyof T]: P extends keyof LikeAvgAggregateOutputType ? LikeAvgAggregateOutputType[P] : never
  }

    



  export type LikeSelect = {
    id?: boolean
    photo?: boolean | PhotoArgs
    user?: boolean | UserArgs
    photoId?: boolean
    userId?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type LikeInclude = {
    photo?: boolean | PhotoArgs
    user?: boolean | UserArgs
  }

  export type LikeGetPayload<
    S extends boolean | null | undefined | LikeArgs,
    U = keyof S
      > = S extends true
        ? Like
    : S extends undefined
    ? never
    : S extends LikeArgs | FindManyLikeArgs
    ?'include' extends U
    ? Like  & {
    [P in TrueKeys<S['include']>]: 
          P extends 'photo'
        ? PhotoGetPayload<S['include'][P]> :
        P extends 'user'
        ? UserGetPayload<S['include'][P]> : never
  } 
    : 'select' extends U
    ? {
    [P in TrueKeys<S['select']>]: P extends keyof Like ?Like [P]
  : 
          P extends 'photo'
        ? PhotoGetPayload<S['select'][P]> :
        P extends 'user'
        ? UserGetPayload<S['select'][P]> : never
  } 
    : Like
  : Like


  export interface LikeDelegate {
    /**
     * Find zero or one Like that matches the filter.
     * @param {FindUniqueLikeArgs} args - Arguments to find a Like
     * @example
     * // Get one Like
     * const like = await prisma.like.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends FindUniqueLikeArgs>(
      args: Subset<T, FindUniqueLikeArgs>
    ): CheckSelect<T, Prisma__LikeClient<Like | null>, Prisma__LikeClient<LikeGetPayload<T> | null>>

    /**
     * Find the first Like that matches the filter.
     * @param {FindFirstLikeArgs} args - Arguments to find a Like
     * @example
     * // Get one Like
     * const like = await prisma.like.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends FindFirstLikeArgs>(
      args?: Subset<T, FindFirstLikeArgs>
    ): CheckSelect<T, Prisma__LikeClient<Like | null>, Prisma__LikeClient<LikeGetPayload<T> | null>>

    /**
     * Find zero or more Likes that matches the filter.
     * @param {FindManyLikeArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Likes
     * const likes = await prisma.like.findMany()
     * 
     * // Get first 10 Likes
     * const likes = await prisma.like.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const likeWithIdOnly = await prisma.like.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends FindManyLikeArgs>(
      args?: Subset<T, FindManyLikeArgs>
    ): CheckSelect<T, Promise<Array<Like>>, Promise<Array<LikeGetPayload<T>>>>

    /**
     * Create a Like.
     * @param {LikeCreateArgs} args - Arguments to create a Like.
     * @example
     * // Create one Like
     * const Like = await prisma.like.create({
     *   data: {
     *     // ... data to create a Like
     *   }
     * })
     * 
    **/
    create<T extends LikeCreateArgs>(
      args: Subset<T, LikeCreateArgs>
    ): CheckSelect<T, Prisma__LikeClient<Like>, Prisma__LikeClient<LikeGetPayload<T>>>

    /**
     * Delete a Like.
     * @param {LikeDeleteArgs} args - Arguments to delete one Like.
     * @example
     * // Delete one Like
     * const Like = await prisma.like.delete({
     *   where: {
     *     // ... filter to delete one Like
     *   }
     * })
     * 
    **/
    delete<T extends LikeDeleteArgs>(
      args: Subset<T, LikeDeleteArgs>
    ): CheckSelect<T, Prisma__LikeClient<Like>, Prisma__LikeClient<LikeGetPayload<T>>>

    /**
     * Update one Like.
     * @param {LikeUpdateArgs} args - Arguments to update one Like.
     * @example
     * // Update one Like
     * const like = await prisma.like.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends LikeUpdateArgs>(
      args: Subset<T, LikeUpdateArgs>
    ): CheckSelect<T, Prisma__LikeClient<Like>, Prisma__LikeClient<LikeGetPayload<T>>>

    /**
     * Delete zero or more Likes.
     * @param {LikeDeleteManyArgs} args - Arguments to filter Likes to delete.
     * @example
     * // Delete a few Likes
     * const { count } = await prisma.like.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends LikeDeleteManyArgs>(
      args?: Subset<T, LikeDeleteManyArgs>
    ): Promise<BatchPayload>

    /**
     * Update zero or more Likes.
     * @param {LikeUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Likes
     * const like = await prisma.like.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends LikeUpdateManyArgs>(
      args: Subset<T, LikeUpdateManyArgs>
    ): Promise<BatchPayload>

    /**
     * Create or update one Like.
     * @param {LikeUpsertArgs} args - Arguments to update or create a Like.
     * @example
     * // Update or create a Like
     * const like = await prisma.like.upsert({
     *   create: {
     *     // ... data to create a Like
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Like we want to update
     *   }
     * })
    **/
    upsert<T extends LikeUpsertArgs>(
      args: Subset<T, LikeUpsertArgs>
    ): CheckSelect<T, Prisma__LikeClient<Like>, Prisma__LikeClient<LikeGetPayload<T>>>

    /**
     * Find zero or one Like that matches the filter.
     * @param {FindUniqueLikeArgs} args - Arguments to find a Like
     * @deprecated This will be deprecated please use prisma.like.findUnique
     * @example
     * // Get one Like
     * const like = await prisma.like.findOne({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findOne<T extends FindUniqueLikeArgs>(
      args: Subset<T, FindUniqueLikeArgs>
    ): CheckSelect<T, Prisma__LikeClient<Like | null>, Prisma__LikeClient<LikeGetPayload<T> | null>>

    /**
     * Count the number of Likes.
     * @param {FindManyLikeArgs} args - Arguments to filter Likes to count.
     * @example
     * // Count the number of Likes
     * const count = await prisma.like.count({
     *   where: {
     *     // ... the filter for the Likes we want to count
     *   }
     * })
    **/
    count(args?: Omit<FindManyLikeArgs, 'select' | 'include'>): Promise<number>

    /**
     * Allows you to perform aggregations operations on a Like.
     * @param {AggregateLikeArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends AggregateLikeArgs>(args: Subset<T, AggregateLikeArgs>): Promise<GetLikeAggregateType<T>>


  }

  /**
   * The delegate class that acts as a "Promise-like" for Like.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in 
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__LikeClient<T> implements Promise<T> {
    private readonly _dmmf;
    private readonly _fetcher;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    constructor(_dmmf: runtime.DMMFClass, _fetcher: PrismaClientFetcher, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);
    readonly [Symbol.toStringTag]: 'PrismaClientPromise';

    photo<T extends PhotoArgs = {}>(args?: Subset<T, PhotoArgs>): CheckSelect<T, Prisma__PhotoClient<Photo | null>, Prisma__PhotoClient<PhotoGetPayload<T> | null>>;

    user<T extends UserArgs = {}>(args?: Subset<T, UserArgs>): CheckSelect<T, Prisma__UserClient<User | null>, Prisma__UserClient<UserGetPayload<T> | null>>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | Promise<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | Promise<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | Promise<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }

  // Custom InputTypes

  /**
   * Like findUnique
   */
  export type FindUniqueLikeArgs = {
    /**
     * Select specific fields to fetch from the Like
    **/
    select?: LikeSelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: LikeInclude | null
    /**
     * Filter, which Like to fetch.
    **/
    where: LikeWhereUniqueInput
  }


  /**
   * Like findFirst
   */
  export type FindFirstLikeArgs = {
    /**
     * Select specific fields to fetch from the Like
    **/
    select?: LikeSelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: LikeInclude | null
    /**
     * Filter, which Like to fetch.
    **/
    where?: LikeWhereInput
    /**
     * @link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs
     * 
     * Determine the order of Likes to fetch.
    **/
    orderBy?: Enumerable<LikeOrderByInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Likes.
    **/
    cursor?: LikeWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Likes from the position of the cursor.
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Likes.
    **/
    skip?: number
    /**
     * @link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs
     * 
     * Filter by unique combinations of Likes.
    **/
    distinct?: Enumerable<LikeScalarFieldEnum>
  }


  /**
   * Like findMany
   */
  export type FindManyLikeArgs = {
    /**
     * Select specific fields to fetch from the Like
    **/
    select?: LikeSelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: LikeInclude | null
    /**
     * Filter, which Likes to fetch.
    **/
    where?: LikeWhereInput
    /**
     * @link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs
     * 
     * Determine the order of Likes to fetch.
    **/
    orderBy?: Enumerable<LikeOrderByInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Likes.
    **/
    cursor?: LikeWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Likes from the position of the cursor.
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Likes.
    **/
    skip?: number
    distinct?: Enumerable<LikeScalarFieldEnum>
  }


  /**
   * Like create
   */
  export type LikeCreateArgs = {
    /**
     * Select specific fields to fetch from the Like
    **/
    select?: LikeSelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: LikeInclude | null
    /**
     * The data needed to create a Like.
    **/
    data: LikeCreateInput
  }


  /**
   * Like update
   */
  export type LikeUpdateArgs = {
    /**
     * Select specific fields to fetch from the Like
    **/
    select?: LikeSelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: LikeInclude | null
    /**
     * The data needed to update a Like.
    **/
    data: LikeUpdateInput
    /**
     * Choose, which Like to update.
    **/
    where: LikeWhereUniqueInput
  }


  /**
   * Like updateMany
   */
  export type LikeUpdateManyArgs = {
    data: LikeUpdateManyMutationInput
    where?: LikeWhereInput
  }


  /**
   * Like upsert
   */
  export type LikeUpsertArgs = {
    /**
     * Select specific fields to fetch from the Like
    **/
    select?: LikeSelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: LikeInclude | null
    /**
     * The filter to search for the Like to update in case it exists.
    **/
    where: LikeWhereUniqueInput
    /**
     * In case the Like found by the `where` argument doesn't exist, create a new Like with this data.
    **/
    create: LikeCreateInput
    /**
     * In case the Like was found with the provided `where` argument, update it with this data.
    **/
    update: LikeUpdateInput
  }


  /**
   * Like delete
   */
  export type LikeDeleteArgs = {
    /**
     * Select specific fields to fetch from the Like
    **/
    select?: LikeSelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: LikeInclude | null
    /**
     * Filter which Like to delete.
    **/
    where: LikeWhereUniqueInput
  }


  /**
   * Like deleteMany
   */
  export type LikeDeleteManyArgs = {
    where?: LikeWhereInput
  }


  /**
   * Like without action
   */
  export type LikeArgs = {
    /**
     * Select specific fields to fetch from the Like
    **/
    select?: LikeSelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: LikeInclude | null
  }



  /**
   * Model Comment
   */


  export type AggregateComment = {
    count: number | null
    avg: CommentAvgAggregateOutputType | null
    sum: CommentSumAggregateOutputType | null
    min: CommentMinAggregateOutputType | null
    max: CommentMaxAggregateOutputType | null
  }

  export type CommentAvgAggregateOutputType = {
    id: number
    photoId: number
    userId: number
  }

  export type CommentSumAggregateOutputType = {
    id: number
    photoId: number
    userId: number
  }

  export type CommentMinAggregateOutputType = {
    id: number
    payload: string | null
    photoId: number
    userId: number
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type CommentMaxAggregateOutputType = {
    id: number
    payload: string | null
    photoId: number
    userId: number
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type CommentCountAggregateOutputType = {
    id: number
    payload: number | null
    photoId: number
    userId: number
    createdAt: number | null
    updatedAt: number | null
    _all: number
  }


  export type CommentAvgAggregateInputType = {
    id?: true
    photoId?: true
    userId?: true
  }

  export type CommentSumAggregateInputType = {
    id?: true
    photoId?: true
    userId?: true
  }

  export type CommentMinAggregateInputType = {
    id?: true
    payload?: true
    photoId?: true
    userId?: true
    createdAt?: true
    updatedAt?: true
  }

  export type CommentMaxAggregateInputType = {
    id?: true
    payload?: true
    photoId?: true
    userId?: true
    createdAt?: true
    updatedAt?: true
  }

  export type CommentCountAggregateInputType = {
    id?: true
    payload?: true
    photoId?: true
    userId?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type AggregateCommentArgs = {
    /**
     * Filter which Comment to aggregate.
    **/
    where?: CommentWhereInput
    /**
     * @link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs
     * 
     * Determine the order of Comments to fetch.
    **/
    orderBy?: Enumerable<CommentOrderByInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
    **/
    cursor?: CommentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Comments from the position of the cursor.
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Comments.
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Comments
    **/
    count?: true
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    avg?: CommentAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    sum?: CommentSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    min?: CommentMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    max?: CommentMaxAggregateInputType
  }

  export type GetCommentAggregateType<T extends AggregateCommentArgs> = {
    [P in keyof T]: P extends 'count' ? number : GetCommentAggregateScalarType<T[P]>
  }

  export type GetCommentAggregateScalarType<T extends any> = {
    [P in keyof T]: P extends keyof CommentAvgAggregateOutputType ? CommentAvgAggregateOutputType[P] : never
  }

    



  export type CommentSelect = {
    id?: boolean
    user?: boolean | UserArgs
    photo?: boolean | PhotoArgs
    payload?: boolean
    photoId?: boolean
    userId?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type CommentInclude = {
    user?: boolean | UserArgs
    photo?: boolean | PhotoArgs
  }

  export type CommentGetPayload<
    S extends boolean | null | undefined | CommentArgs,
    U = keyof S
      > = S extends true
        ? Comment
    : S extends undefined
    ? never
    : S extends CommentArgs | FindManyCommentArgs
    ?'include' extends U
    ? Comment  & {
    [P in TrueKeys<S['include']>]: 
          P extends 'user'
        ? UserGetPayload<S['include'][P]> :
        P extends 'photo'
        ? PhotoGetPayload<S['include'][P]> : never
  } 
    : 'select' extends U
    ? {
    [P in TrueKeys<S['select']>]: P extends keyof Comment ?Comment [P]
  : 
          P extends 'user'
        ? UserGetPayload<S['select'][P]> :
        P extends 'photo'
        ? PhotoGetPayload<S['select'][P]> : never
  } 
    : Comment
  : Comment


  export interface CommentDelegate {
    /**
     * Find zero or one Comment that matches the filter.
     * @param {FindUniqueCommentArgs} args - Arguments to find a Comment
     * @example
     * // Get one Comment
     * const comment = await prisma.comment.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends FindUniqueCommentArgs>(
      args: Subset<T, FindUniqueCommentArgs>
    ): CheckSelect<T, Prisma__CommentClient<Comment | null>, Prisma__CommentClient<CommentGetPayload<T> | null>>

    /**
     * Find the first Comment that matches the filter.
     * @param {FindFirstCommentArgs} args - Arguments to find a Comment
     * @example
     * // Get one Comment
     * const comment = await prisma.comment.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends FindFirstCommentArgs>(
      args?: Subset<T, FindFirstCommentArgs>
    ): CheckSelect<T, Prisma__CommentClient<Comment | null>, Prisma__CommentClient<CommentGetPayload<T> | null>>

    /**
     * Find zero or more Comments that matches the filter.
     * @param {FindManyCommentArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Comments
     * const comments = await prisma.comment.findMany()
     * 
     * // Get first 10 Comments
     * const comments = await prisma.comment.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const commentWithIdOnly = await prisma.comment.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends FindManyCommentArgs>(
      args?: Subset<T, FindManyCommentArgs>
    ): CheckSelect<T, Promise<Array<Comment>>, Promise<Array<CommentGetPayload<T>>>>

    /**
     * Create a Comment.
     * @param {CommentCreateArgs} args - Arguments to create a Comment.
     * @example
     * // Create one Comment
     * const Comment = await prisma.comment.create({
     *   data: {
     *     // ... data to create a Comment
     *   }
     * })
     * 
    **/
    create<T extends CommentCreateArgs>(
      args: Subset<T, CommentCreateArgs>
    ): CheckSelect<T, Prisma__CommentClient<Comment>, Prisma__CommentClient<CommentGetPayload<T>>>

    /**
     * Delete a Comment.
     * @param {CommentDeleteArgs} args - Arguments to delete one Comment.
     * @example
     * // Delete one Comment
     * const Comment = await prisma.comment.delete({
     *   where: {
     *     // ... filter to delete one Comment
     *   }
     * })
     * 
    **/
    delete<T extends CommentDeleteArgs>(
      args: Subset<T, CommentDeleteArgs>
    ): CheckSelect<T, Prisma__CommentClient<Comment>, Prisma__CommentClient<CommentGetPayload<T>>>

    /**
     * Update one Comment.
     * @param {CommentUpdateArgs} args - Arguments to update one Comment.
     * @example
     * // Update one Comment
     * const comment = await prisma.comment.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends CommentUpdateArgs>(
      args: Subset<T, CommentUpdateArgs>
    ): CheckSelect<T, Prisma__CommentClient<Comment>, Prisma__CommentClient<CommentGetPayload<T>>>

    /**
     * Delete zero or more Comments.
     * @param {CommentDeleteManyArgs} args - Arguments to filter Comments to delete.
     * @example
     * // Delete a few Comments
     * const { count } = await prisma.comment.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends CommentDeleteManyArgs>(
      args?: Subset<T, CommentDeleteManyArgs>
    ): Promise<BatchPayload>

    /**
     * Update zero or more Comments.
     * @param {CommentUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Comments
     * const comment = await prisma.comment.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends CommentUpdateManyArgs>(
      args: Subset<T, CommentUpdateManyArgs>
    ): Promise<BatchPayload>

    /**
     * Create or update one Comment.
     * @param {CommentUpsertArgs} args - Arguments to update or create a Comment.
     * @example
     * // Update or create a Comment
     * const comment = await prisma.comment.upsert({
     *   create: {
     *     // ... data to create a Comment
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Comment we want to update
     *   }
     * })
    **/
    upsert<T extends CommentUpsertArgs>(
      args: Subset<T, CommentUpsertArgs>
    ): CheckSelect<T, Prisma__CommentClient<Comment>, Prisma__CommentClient<CommentGetPayload<T>>>

    /**
     * Find zero or one Comment that matches the filter.
     * @param {FindUniqueCommentArgs} args - Arguments to find a Comment
     * @deprecated This will be deprecated please use prisma.comment.findUnique
     * @example
     * // Get one Comment
     * const comment = await prisma.comment.findOne({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findOne<T extends FindUniqueCommentArgs>(
      args: Subset<T, FindUniqueCommentArgs>
    ): CheckSelect<T, Prisma__CommentClient<Comment | null>, Prisma__CommentClient<CommentGetPayload<T> | null>>

    /**
     * Count the number of Comments.
     * @param {FindManyCommentArgs} args - Arguments to filter Comments to count.
     * @example
     * // Count the number of Comments
     * const count = await prisma.comment.count({
     *   where: {
     *     // ... the filter for the Comments we want to count
     *   }
     * })
    **/
    count(args?: Omit<FindManyCommentArgs, 'select' | 'include'>): Promise<number>

    /**
     * Allows you to perform aggregations operations on a Comment.
     * @param {AggregateCommentArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends AggregateCommentArgs>(args: Subset<T, AggregateCommentArgs>): Promise<GetCommentAggregateType<T>>


  }

  /**
   * The delegate class that acts as a "Promise-like" for Comment.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in 
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__CommentClient<T> implements Promise<T> {
    private readonly _dmmf;
    private readonly _fetcher;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    constructor(_dmmf: runtime.DMMFClass, _fetcher: PrismaClientFetcher, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);
    readonly [Symbol.toStringTag]: 'PrismaClientPromise';

    user<T extends UserArgs = {}>(args?: Subset<T, UserArgs>): CheckSelect<T, Prisma__UserClient<User | null>, Prisma__UserClient<UserGetPayload<T> | null>>;

    photo<T extends PhotoArgs = {}>(args?: Subset<T, PhotoArgs>): CheckSelect<T, Prisma__PhotoClient<Photo | null>, Prisma__PhotoClient<PhotoGetPayload<T> | null>>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | Promise<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | Promise<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | Promise<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }

  // Custom InputTypes

  /**
   * Comment findUnique
   */
  export type FindUniqueCommentArgs = {
    /**
     * Select specific fields to fetch from the Comment
    **/
    select?: CommentSelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: CommentInclude | null
    /**
     * Filter, which Comment to fetch.
    **/
    where: CommentWhereUniqueInput
  }


  /**
   * Comment findFirst
   */
  export type FindFirstCommentArgs = {
    /**
     * Select specific fields to fetch from the Comment
    **/
    select?: CommentSelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: CommentInclude | null
    /**
     * Filter, which Comment to fetch.
    **/
    where?: CommentWhereInput
    /**
     * @link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs
     * 
     * Determine the order of Comments to fetch.
    **/
    orderBy?: Enumerable<CommentOrderByInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Comments.
    **/
    cursor?: CommentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Comments from the position of the cursor.
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Comments.
    **/
    skip?: number
    /**
     * @link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs
     * 
     * Filter by unique combinations of Comments.
    **/
    distinct?: Enumerable<CommentScalarFieldEnum>
  }


  /**
   * Comment findMany
   */
  export type FindManyCommentArgs = {
    /**
     * Select specific fields to fetch from the Comment
    **/
    select?: CommentSelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: CommentInclude | null
    /**
     * Filter, which Comments to fetch.
    **/
    where?: CommentWhereInput
    /**
     * @link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs
     * 
     * Determine the order of Comments to fetch.
    **/
    orderBy?: Enumerable<CommentOrderByInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Comments.
    **/
    cursor?: CommentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Comments from the position of the cursor.
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Comments.
    **/
    skip?: number
    distinct?: Enumerable<CommentScalarFieldEnum>
  }


  /**
   * Comment create
   */
  export type CommentCreateArgs = {
    /**
     * Select specific fields to fetch from the Comment
    **/
    select?: CommentSelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: CommentInclude | null
    /**
     * The data needed to create a Comment.
    **/
    data: CommentCreateInput
  }


  /**
   * Comment update
   */
  export type CommentUpdateArgs = {
    /**
     * Select specific fields to fetch from the Comment
    **/
    select?: CommentSelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: CommentInclude | null
    /**
     * The data needed to update a Comment.
    **/
    data: CommentUpdateInput
    /**
     * Choose, which Comment to update.
    **/
    where: CommentWhereUniqueInput
  }


  /**
   * Comment updateMany
   */
  export type CommentUpdateManyArgs = {
    data: CommentUpdateManyMutationInput
    where?: CommentWhereInput
  }


  /**
   * Comment upsert
   */
  export type CommentUpsertArgs = {
    /**
     * Select specific fields to fetch from the Comment
    **/
    select?: CommentSelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: CommentInclude | null
    /**
     * The filter to search for the Comment to update in case it exists.
    **/
    where: CommentWhereUniqueInput
    /**
     * In case the Comment found by the `where` argument doesn't exist, create a new Comment with this data.
    **/
    create: CommentCreateInput
    /**
     * In case the Comment was found with the provided `where` argument, update it with this data.
    **/
    update: CommentUpdateInput
  }


  /**
   * Comment delete
   */
  export type CommentDeleteArgs = {
    /**
     * Select specific fields to fetch from the Comment
    **/
    select?: CommentSelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: CommentInclude | null
    /**
     * Filter which Comment to delete.
    **/
    where: CommentWhereUniqueInput
  }


  /**
   * Comment deleteMany
   */
  export type CommentDeleteManyArgs = {
    where?: CommentWhereInput
  }


  /**
   * Comment without action
   */
  export type CommentArgs = {
    /**
     * Select specific fields to fetch from the Comment
    **/
    select?: CommentSelect | null
    /**
     * Choose, which related nodes to fetch as well.
    **/
    include?: CommentInclude | null
  }



  /**
   * Enums
   */

  // Based on
  // https://github.com/microsoft/TypeScript/issues/3192#issuecomment-261720275

  export const MovieScalarFieldEnum: {
    id: 'id',
    title: 'title',
    year: 'year',
    genre: 'genre',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type MovieScalarFieldEnum = (typeof MovieScalarFieldEnum)[keyof typeof MovieScalarFieldEnum]


  export const UserScalarFieldEnum: {
    id: 'id',
    firstName: 'firstName',
    lastName: 'lastName',
    username: 'username',
    email: 'email',
    password: 'password',
    bio: 'bio',
    avatar: 'avatar',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type UserScalarFieldEnum = (typeof UserScalarFieldEnum)[keyof typeof UserScalarFieldEnum]


  export const PhotoScalarFieldEnum: {
    id: 'id',
    userId: 'userId',
    file: 'file',
    caption: 'caption',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type PhotoScalarFieldEnum = (typeof PhotoScalarFieldEnum)[keyof typeof PhotoScalarFieldEnum]


  export const HashtagScalarFieldEnum: {
    id: 'id',
    hashtag: 'hashtag',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type HashtagScalarFieldEnum = (typeof HashtagScalarFieldEnum)[keyof typeof HashtagScalarFieldEnum]


  export const LikeScalarFieldEnum: {
    id: 'id',
    photoId: 'photoId',
    userId: 'userId',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type LikeScalarFieldEnum = (typeof LikeScalarFieldEnum)[keyof typeof LikeScalarFieldEnum]


  export const CommentScalarFieldEnum: {
    id: 'id',
    payload: 'payload',
    photoId: 'photoId',
    userId: 'userId',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type CommentScalarFieldEnum = (typeof CommentScalarFieldEnum)[keyof typeof CommentScalarFieldEnum]


  export const SortOrder: {
    asc: 'asc',
    desc: 'desc'
  };

  export type SortOrder = (typeof SortOrder)[keyof typeof SortOrder]


  export const QueryMode: {
    default: 'default',
    insensitive: 'insensitive'
  };

  export type QueryMode = (typeof QueryMode)[keyof typeof QueryMode]


  /**
   * Deep Input Types
   */


  export type MovieWhereInput = {
    AND?: Enumerable<MovieWhereInput>
    OR?: Enumerable<MovieWhereInput>
    NOT?: Enumerable<MovieWhereInput>
    id?: IntFilter | number
    title?: StringFilter | string
    year?: IntFilter | number
    genre?: StringNullableFilter | string | null
    createdAt?: DateTimeFilter | Date | string
    updatedAt?: DateTimeFilter | Date | string
  }

  export type MovieOrderByInput = {
    id?: SortOrder
    title?: SortOrder
    year?: SortOrder
    genre?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type MovieWhereUniqueInput = {
    id?: number
  }

  export type UserWhereInput = {
    AND?: Enumerable<UserWhereInput>
    OR?: Enumerable<UserWhereInput>
    NOT?: Enumerable<UserWhereInput>
    id?: IntFilter | number
    firstName?: StringFilter | string
    lastName?: StringNullableFilter | string | null
    username?: StringFilter | string
    email?: StringFilter | string
    password?: StringFilter | string
    bio?: StringNullableFilter | string | null
    avatar?: StringNullableFilter | string | null
    photos?: PhotoListRelationFilter
    likes?: LikeListRelationFilter
    comments?: CommentListRelationFilter
    followers?: UserListRelationFilter
    following?: UserListRelationFilter
    createdAt?: DateTimeFilter | Date | string
    updatedAt?: DateTimeFilter | Date | string
  }

  export type UserOrderByInput = {
    id?: SortOrder
    firstName?: SortOrder
    lastName?: SortOrder
    username?: SortOrder
    email?: SortOrder
    password?: SortOrder
    bio?: SortOrder
    avatar?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type UserWhereUniqueInput = {
    id?: number
    username?: string
    email?: string
  }

  export type PhotoWhereInput = {
    AND?: Enumerable<PhotoWhereInput>
    OR?: Enumerable<PhotoWhereInput>
    NOT?: Enumerable<PhotoWhereInput>
    id?: IntFilter | number
    user?: XOR<UserWhereInput, UserRelationFilter>
    userId?: IntFilter | number
    file?: StringFilter | string
    caption?: StringNullableFilter | string | null
    hashtags?: HashtagListRelationFilter
    likes?: LikeListRelationFilter
    comments?: CommentListRelationFilter
    createdAt?: DateTimeFilter | Date | string
    updatedAt?: DateTimeFilter | Date | string
  }

  export type PhotoOrderByInput = {
    id?: SortOrder
    userId?: SortOrder
    file?: SortOrder
    caption?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type PhotoWhereUniqueInput = {
    id?: number
  }

  export type HashtagWhereInput = {
    AND?: Enumerable<HashtagWhereInput>
    OR?: Enumerable<HashtagWhereInput>
    NOT?: Enumerable<HashtagWhereInput>
    id?: IntFilter | number
    hashtag?: StringFilter | string
    photos?: PhotoListRelationFilter
    createdAt?: DateTimeFilter | Date | string
    updatedAt?: DateTimeFilter | Date | string
  }

  export type HashtagOrderByInput = {
    id?: SortOrder
    hashtag?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type HashtagWhereUniqueInput = {
    id?: number
    hashtag?: string
  }

  export type LikeWhereInput = {
    AND?: Enumerable<LikeWhereInput>
    OR?: Enumerable<LikeWhereInput>
    NOT?: Enumerable<LikeWhereInput>
    id?: IntFilter | number
    photo?: XOR<PhotoWhereInput, PhotoRelationFilter>
    user?: XOR<UserWhereInput, UserRelationFilter>
    photoId?: IntFilter | number
    userId?: IntFilter | number
    createdAt?: DateTimeFilter | Date | string
    updatedAt?: DateTimeFilter | Date | string
  }

  export type LikeOrderByInput = {
    id?: SortOrder
    photoId?: SortOrder
    userId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type LikeWhereUniqueInput = {
    id?: number
    photoId_userId?: LikePhotoIdUserIdCompoundUniqueInput
  }

  export type CommentWhereInput = {
    AND?: Enumerable<CommentWhereInput>
    OR?: Enumerable<CommentWhereInput>
    NOT?: Enumerable<CommentWhereInput>
    id?: IntFilter | number
    user?: XOR<UserWhereInput, UserRelationFilter>
    photo?: XOR<PhotoWhereInput, PhotoRelationFilter>
    payload?: StringFilter | string
    photoId?: IntFilter | number
    userId?: IntFilter | number
    createdAt?: DateTimeFilter | Date | string
    updatedAt?: DateTimeFilter | Date | string
  }

  export type CommentOrderByInput = {
    id?: SortOrder
    payload?: SortOrder
    photoId?: SortOrder
    userId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type CommentWhereUniqueInput = {
    id?: number
  }

  export type MovieCreateInput = {
    title: string
    year: number
    genre?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type MovieUpdateInput = {
    title?: StringFieldUpdateOperationsInput | string
    year?: IntFieldUpdateOperationsInput | number
    genre?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type MovieUpdateManyMutationInput = {
    title?: StringFieldUpdateOperationsInput | string
    year?: IntFieldUpdateOperationsInput | number
    genre?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UserCreateInput = {
    firstName: string
    lastName?: string | null
    username: string
    email: string
    password: string
    bio?: string | null
    avatar?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    photos?: PhotoCreateManyWithoutUserInput
    likes?: LikeCreateManyWithoutUserInput
    comments?: CommentCreateManyWithoutUserInput
    followers?: UserCreateManyWithoutFollowingInput
    following?: UserCreateManyWithoutFollowersInput
  }

  export type UserUpdateInput = {
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: NullableStringFieldUpdateOperationsInput | string | null
    username?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    bio?: NullableStringFieldUpdateOperationsInput | string | null
    avatar?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    photos?: PhotoUpdateManyWithoutUserInput
    likes?: LikeUpdateManyWithoutUserInput
    comments?: CommentUpdateManyWithoutUserInput
    followers?: UserUpdateManyWithoutFollowingInput
    following?: UserUpdateManyWithoutFollowersInput
  }

  export type UserUpdateManyMutationInput = {
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: NullableStringFieldUpdateOperationsInput | string | null
    username?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    bio?: NullableStringFieldUpdateOperationsInput | string | null
    avatar?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type PhotoCreateInput = {
    file: string
    caption?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    user: UserCreateOneWithoutPhotosInput
    hashtags?: HashtagCreateManyWithoutPhotosInput
    likes?: LikeCreateManyWithoutPhotoInput
    comments?: CommentCreateManyWithoutPhotoInput
  }

  export type PhotoUpdateInput = {
    file?: StringFieldUpdateOperationsInput | string
    caption?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneRequiredWithoutPhotosInput
    hashtags?: HashtagUpdateManyWithoutPhotosInput
    likes?: LikeUpdateManyWithoutPhotoInput
    comments?: CommentUpdateManyWithoutPhotoInput
  }

  export type PhotoUpdateManyMutationInput = {
    file?: StringFieldUpdateOperationsInput | string
    caption?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type HashtagCreateInput = {
    hashtag: string
    createdAt?: Date | string
    updatedAt?: Date | string
    photos?: PhotoCreateManyWithoutHashtagsInput
  }

  export type HashtagUpdateInput = {
    hashtag?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    photos?: PhotoUpdateManyWithoutHashtagsInput
  }

  export type HashtagUpdateManyMutationInput = {
    hashtag?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type LikeCreateInput = {
    createdAt?: Date | string
    updatedAt?: Date | string
    photo: PhotoCreateOneWithoutLikesInput
    user: UserCreateOneWithoutLikesInput
  }

  export type LikeUpdateInput = {
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    photo?: PhotoUpdateOneRequiredWithoutLikesInput
    user?: UserUpdateOneRequiredWithoutLikesInput
  }

  export type LikeUpdateManyMutationInput = {
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type CommentCreateInput = {
    payload: string
    createdAt?: Date | string
    updatedAt?: Date | string
    user: UserCreateOneWithoutCommentsInput
    photo: PhotoCreateOneWithoutCommentsInput
  }

  export type CommentUpdateInput = {
    payload?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneRequiredWithoutCommentsInput
    photo?: PhotoUpdateOneRequiredWithoutCommentsInput
  }

  export type CommentUpdateManyMutationInput = {
    payload?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type IntFilter = {
    equals?: number
    in?: Enumerable<number>
    notIn?: Enumerable<number>
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntFilter | number
  }

  export type StringFilter = {
    equals?: string
    in?: Enumerable<string>
    notIn?: Enumerable<string>
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    mode?: QueryMode
    not?: NestedStringFilter | string
  }

  export type StringNullableFilter = {
    equals?: string | null
    in?: Enumerable<string> | null
    notIn?: Enumerable<string> | null
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    mode?: QueryMode
    not?: NestedStringNullableFilter | string | null
  }

  export type DateTimeFilter = {
    equals?: Date | string
    in?: Enumerable<Date> | Enumerable<string>
    notIn?: Enumerable<Date> | Enumerable<string>
    lt?: Date | string
    lte?: Date | string
    gt?: Date | string
    gte?: Date | string
    not?: NestedDateTimeFilter | Date | string
  }

  export type PhotoListRelationFilter = {
    every?: PhotoWhereInput
    some?: PhotoWhereInput
    none?: PhotoWhereInput
  }

  export type LikeListRelationFilter = {
    every?: LikeWhereInput
    some?: LikeWhereInput
    none?: LikeWhereInput
  }

  export type CommentListRelationFilter = {
    every?: CommentWhereInput
    some?: CommentWhereInput
    none?: CommentWhereInput
  }

  export type UserListRelationFilter = {
    every?: UserWhereInput
    some?: UserWhereInput
    none?: UserWhereInput
  }

  export type UserRelationFilter = {
    is?: UserWhereInput
    isNot?: UserWhereInput
  }

  export type HashtagListRelationFilter = {
    every?: HashtagWhereInput
    some?: HashtagWhereInput
    none?: HashtagWhereInput
  }

  export type PhotoRelationFilter = {
    is?: PhotoWhereInput
    isNot?: PhotoWhereInput
  }

  export type LikePhotoIdUserIdCompoundUniqueInput = {
    photoId: number
    userId: number
  }

  export type StringFieldUpdateOperationsInput = {
    set?: string
  }

  export type IntFieldUpdateOperationsInput = {
    set?: number
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type NullableStringFieldUpdateOperationsInput = {
    set?: string | null
  }

  export type DateTimeFieldUpdateOperationsInput = {
    set?: Date | string
  }

  export type PhotoCreateManyWithoutUserInput = {
    create?: Enumerable<PhotoCreateWithoutUserInput>
    connect?: Enumerable<PhotoWhereUniqueInput>
    connectOrCreate?: Enumerable<PhotoCreateOrConnectWithoutuserInput>
  }

  export type LikeCreateManyWithoutUserInput = {
    create?: Enumerable<LikeCreateWithoutUserInput>
    connect?: Enumerable<LikeWhereUniqueInput>
    connectOrCreate?: Enumerable<LikeCreateOrConnectWithoutuserInput>
  }

  export type CommentCreateManyWithoutUserInput = {
    create?: Enumerable<CommentCreateWithoutUserInput>
    connect?: Enumerable<CommentWhereUniqueInput>
    connectOrCreate?: Enumerable<CommentCreateOrConnectWithoutuserInput>
  }

  export type UserCreateManyWithoutFollowingInput = {
    create?: Enumerable<UserCreateWithoutFollowingInput>
    connect?: Enumerable<UserWhereUniqueInput>
    connectOrCreate?: Enumerable<UserCreateOrConnectWithoutfollowingInput>
  }

  export type UserCreateManyWithoutFollowersInput = {
    create?: Enumerable<UserCreateWithoutFollowersInput>
    connect?: Enumerable<UserWhereUniqueInput>
    connectOrCreate?: Enumerable<UserCreateOrConnectWithoutfollowersInput>
  }

  export type PhotoUpdateManyWithoutUserInput = {
    create?: Enumerable<PhotoCreateWithoutUserInput>
    connect?: Enumerable<PhotoWhereUniqueInput>
    set?: Enumerable<PhotoWhereUniqueInput>
    disconnect?: Enumerable<PhotoWhereUniqueInput>
    delete?: Enumerable<PhotoWhereUniqueInput>
    update?: Enumerable<PhotoUpdateWithWhereUniqueWithoutUserInput>
    updateMany?: Enumerable<PhotoUpdateManyWithWhereWithoutUserInput>
    deleteMany?: Enumerable<PhotoScalarWhereInput>
    upsert?: Enumerable<PhotoUpsertWithWhereUniqueWithoutUserInput>
    connectOrCreate?: Enumerable<PhotoCreateOrConnectWithoutuserInput>
  }

  export type LikeUpdateManyWithoutUserInput = {
    create?: Enumerable<LikeCreateWithoutUserInput>
    connect?: Enumerable<LikeWhereUniqueInput>
    set?: Enumerable<LikeWhereUniqueInput>
    disconnect?: Enumerable<LikeWhereUniqueInput>
    delete?: Enumerable<LikeWhereUniqueInput>
    update?: Enumerable<LikeUpdateWithWhereUniqueWithoutUserInput>
    updateMany?: Enumerable<LikeUpdateManyWithWhereWithoutUserInput>
    deleteMany?: Enumerable<LikeScalarWhereInput>
    upsert?: Enumerable<LikeUpsertWithWhereUniqueWithoutUserInput>
    connectOrCreate?: Enumerable<LikeCreateOrConnectWithoutuserInput>
  }

  export type CommentUpdateManyWithoutUserInput = {
    create?: Enumerable<CommentCreateWithoutUserInput>
    connect?: Enumerable<CommentWhereUniqueInput>
    set?: Enumerable<CommentWhereUniqueInput>
    disconnect?: Enumerable<CommentWhereUniqueInput>
    delete?: Enumerable<CommentWhereUniqueInput>
    update?: Enumerable<CommentUpdateWithWhereUniqueWithoutUserInput>
    updateMany?: Enumerable<CommentUpdateManyWithWhereWithoutUserInput>
    deleteMany?: Enumerable<CommentScalarWhereInput>
    upsert?: Enumerable<CommentUpsertWithWhereUniqueWithoutUserInput>
    connectOrCreate?: Enumerable<CommentCreateOrConnectWithoutuserInput>
  }

  export type UserUpdateManyWithoutFollowingInput = {
    create?: Enumerable<UserCreateWithoutFollowingInput>
    connect?: Enumerable<UserWhereUniqueInput>
    set?: Enumerable<UserWhereUniqueInput>
    disconnect?: Enumerable<UserWhereUniqueInput>
    delete?: Enumerable<UserWhereUniqueInput>
    update?: Enumerable<UserUpdateWithWhereUniqueWithoutFollowingInput>
    updateMany?: Enumerable<UserUpdateManyWithWhereWithoutFollowingInput>
    deleteMany?: Enumerable<UserScalarWhereInput>
    upsert?: Enumerable<UserUpsertWithWhereUniqueWithoutFollowingInput>
    connectOrCreate?: Enumerable<UserCreateOrConnectWithoutfollowingInput>
  }

  export type UserUpdateManyWithoutFollowersInput = {
    create?: Enumerable<UserCreateWithoutFollowersInput>
    connect?: Enumerable<UserWhereUniqueInput>
    set?: Enumerable<UserWhereUniqueInput>
    disconnect?: Enumerable<UserWhereUniqueInput>
    delete?: Enumerable<UserWhereUniqueInput>
    update?: Enumerable<UserUpdateWithWhereUniqueWithoutFollowersInput>
    updateMany?: Enumerable<UserUpdateManyWithWhereWithoutFollowersInput>
    deleteMany?: Enumerable<UserScalarWhereInput>
    upsert?: Enumerable<UserUpsertWithWhereUniqueWithoutFollowersInput>
    connectOrCreate?: Enumerable<UserCreateOrConnectWithoutfollowersInput>
  }

  export type UserCreateOneWithoutPhotosInput = {
    create?: UserCreateWithoutPhotosInput
    connect?: UserWhereUniqueInput
    connectOrCreate?: UserCreateOrConnectWithoutphotosInput
  }

  export type HashtagCreateManyWithoutPhotosInput = {
    create?: Enumerable<HashtagCreateWithoutPhotosInput>
    connect?: Enumerable<HashtagWhereUniqueInput>
    connectOrCreate?: Enumerable<HashtagCreateOrConnectWithoutphotosInput>
  }

  export type LikeCreateManyWithoutPhotoInput = {
    create?: Enumerable<LikeCreateWithoutPhotoInput>
    connect?: Enumerable<LikeWhereUniqueInput>
    connectOrCreate?: Enumerable<LikeCreateOrConnectWithoutphotoInput>
  }

  export type CommentCreateManyWithoutPhotoInput = {
    create?: Enumerable<CommentCreateWithoutPhotoInput>
    connect?: Enumerable<CommentWhereUniqueInput>
    connectOrCreate?: Enumerable<CommentCreateOrConnectWithoutphotoInput>
  }

  export type UserUpdateOneRequiredWithoutPhotosInput = {
    create?: UserCreateWithoutPhotosInput
    connect?: UserWhereUniqueInput
    update?: UserUpdateWithoutPhotosInput
    upsert?: UserUpsertWithoutPhotosInput
    connectOrCreate?: UserCreateOrConnectWithoutphotosInput
  }

  export type HashtagUpdateManyWithoutPhotosInput = {
    create?: Enumerable<HashtagCreateWithoutPhotosInput>
    connect?: Enumerable<HashtagWhereUniqueInput>
    set?: Enumerable<HashtagWhereUniqueInput>
    disconnect?: Enumerable<HashtagWhereUniqueInput>
    delete?: Enumerable<HashtagWhereUniqueInput>
    update?: Enumerable<HashtagUpdateWithWhereUniqueWithoutPhotosInput>
    updateMany?: Enumerable<HashtagUpdateManyWithWhereWithoutPhotosInput>
    deleteMany?: Enumerable<HashtagScalarWhereInput>
    upsert?: Enumerable<HashtagUpsertWithWhereUniqueWithoutPhotosInput>
    connectOrCreate?: Enumerable<HashtagCreateOrConnectWithoutphotosInput>
  }

  export type LikeUpdateManyWithoutPhotoInput = {
    create?: Enumerable<LikeCreateWithoutPhotoInput>
    connect?: Enumerable<LikeWhereUniqueInput>
    set?: Enumerable<LikeWhereUniqueInput>
    disconnect?: Enumerable<LikeWhereUniqueInput>
    delete?: Enumerable<LikeWhereUniqueInput>
    update?: Enumerable<LikeUpdateWithWhereUniqueWithoutPhotoInput>
    updateMany?: Enumerable<LikeUpdateManyWithWhereWithoutPhotoInput>
    deleteMany?: Enumerable<LikeScalarWhereInput>
    upsert?: Enumerable<LikeUpsertWithWhereUniqueWithoutPhotoInput>
    connectOrCreate?: Enumerable<LikeCreateOrConnectWithoutphotoInput>
  }

  export type CommentUpdateManyWithoutPhotoInput = {
    create?: Enumerable<CommentCreateWithoutPhotoInput>
    connect?: Enumerable<CommentWhereUniqueInput>
    set?: Enumerable<CommentWhereUniqueInput>
    disconnect?: Enumerable<CommentWhereUniqueInput>
    delete?: Enumerable<CommentWhereUniqueInput>
    update?: Enumerable<CommentUpdateWithWhereUniqueWithoutPhotoInput>
    updateMany?: Enumerable<CommentUpdateManyWithWhereWithoutPhotoInput>
    deleteMany?: Enumerable<CommentScalarWhereInput>
    upsert?: Enumerable<CommentUpsertWithWhereUniqueWithoutPhotoInput>
    connectOrCreate?: Enumerable<CommentCreateOrConnectWithoutphotoInput>
  }

  export type PhotoCreateManyWithoutHashtagsInput = {
    create?: Enumerable<PhotoCreateWithoutHashtagsInput>
    connect?: Enumerable<PhotoWhereUniqueInput>
    connectOrCreate?: Enumerable<PhotoCreateOrConnectWithouthashtagsInput>
  }

  export type PhotoUpdateManyWithoutHashtagsInput = {
    create?: Enumerable<PhotoCreateWithoutHashtagsInput>
    connect?: Enumerable<PhotoWhereUniqueInput>
    set?: Enumerable<PhotoWhereUniqueInput>
    disconnect?: Enumerable<PhotoWhereUniqueInput>
    delete?: Enumerable<PhotoWhereUniqueInput>
    update?: Enumerable<PhotoUpdateWithWhereUniqueWithoutHashtagsInput>
    updateMany?: Enumerable<PhotoUpdateManyWithWhereWithoutHashtagsInput>
    deleteMany?: Enumerable<PhotoScalarWhereInput>
    upsert?: Enumerable<PhotoUpsertWithWhereUniqueWithoutHashtagsInput>
    connectOrCreate?: Enumerable<PhotoCreateOrConnectWithouthashtagsInput>
  }

  export type PhotoCreateOneWithoutLikesInput = {
    create?: PhotoCreateWithoutLikesInput
    connect?: PhotoWhereUniqueInput
    connectOrCreate?: PhotoCreateOrConnectWithoutlikesInput
  }

  export type UserCreateOneWithoutLikesInput = {
    create?: UserCreateWithoutLikesInput
    connect?: UserWhereUniqueInput
    connectOrCreate?: UserCreateOrConnectWithoutlikesInput
  }

  export type PhotoUpdateOneRequiredWithoutLikesInput = {
    create?: PhotoCreateWithoutLikesInput
    connect?: PhotoWhereUniqueInput
    update?: PhotoUpdateWithoutLikesInput
    upsert?: PhotoUpsertWithoutLikesInput
    connectOrCreate?: PhotoCreateOrConnectWithoutlikesInput
  }

  export type UserUpdateOneRequiredWithoutLikesInput = {
    create?: UserCreateWithoutLikesInput
    connect?: UserWhereUniqueInput
    update?: UserUpdateWithoutLikesInput
    upsert?: UserUpsertWithoutLikesInput
    connectOrCreate?: UserCreateOrConnectWithoutlikesInput
  }

  export type UserCreateOneWithoutCommentsInput = {
    create?: UserCreateWithoutCommentsInput
    connect?: UserWhereUniqueInput
    connectOrCreate?: UserCreateOrConnectWithoutcommentsInput
  }

  export type PhotoCreateOneWithoutCommentsInput = {
    create?: PhotoCreateWithoutCommentsInput
    connect?: PhotoWhereUniqueInput
    connectOrCreate?: PhotoCreateOrConnectWithoutcommentsInput
  }

  export type UserUpdateOneRequiredWithoutCommentsInput = {
    create?: UserCreateWithoutCommentsInput
    connect?: UserWhereUniqueInput
    update?: UserUpdateWithoutCommentsInput
    upsert?: UserUpsertWithoutCommentsInput
    connectOrCreate?: UserCreateOrConnectWithoutcommentsInput
  }

  export type PhotoUpdateOneRequiredWithoutCommentsInput = {
    create?: PhotoCreateWithoutCommentsInput
    connect?: PhotoWhereUniqueInput
    update?: PhotoUpdateWithoutCommentsInput
    upsert?: PhotoUpsertWithoutCommentsInput
    connectOrCreate?: PhotoCreateOrConnectWithoutcommentsInput
  }

  export type NestedIntFilter = {
    equals?: number
    in?: Enumerable<number>
    notIn?: Enumerable<number>
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntFilter | number
  }

  export type NestedStringFilter = {
    equals?: string
    in?: Enumerable<string>
    notIn?: Enumerable<string>
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    not?: NestedStringFilter | string
  }

  export type NestedStringNullableFilter = {
    equals?: string | null
    in?: Enumerable<string> | null
    notIn?: Enumerable<string> | null
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    not?: NestedStringNullableFilter | string | null
  }

  export type NestedDateTimeFilter = {
    equals?: Date | string
    in?: Enumerable<Date> | Enumerable<string>
    notIn?: Enumerable<Date> | Enumerable<string>
    lt?: Date | string
    lte?: Date | string
    gt?: Date | string
    gte?: Date | string
    not?: NestedDateTimeFilter | Date | string
  }

  export type PhotoCreateWithoutUserInput = {
    file: string
    caption?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    hashtags?: HashtagCreateManyWithoutPhotosInput
    likes?: LikeCreateManyWithoutPhotoInput
    comments?: CommentCreateManyWithoutPhotoInput
  }

  export type PhotoCreateOrConnectWithoutuserInput = {
    where: PhotoWhereUniqueInput
    create: PhotoCreateWithoutUserInput
  }

  export type LikeCreateWithoutUserInput = {
    createdAt?: Date | string
    updatedAt?: Date | string
    photo: PhotoCreateOneWithoutLikesInput
  }

  export type LikeCreateOrConnectWithoutuserInput = {
    where: LikeWhereUniqueInput
    create: LikeCreateWithoutUserInput
  }

  export type CommentCreateWithoutUserInput = {
    payload: string
    createdAt?: Date | string
    updatedAt?: Date | string
    photo: PhotoCreateOneWithoutCommentsInput
  }

  export type CommentCreateOrConnectWithoutuserInput = {
    where: CommentWhereUniqueInput
    create: CommentCreateWithoutUserInput
  }

  export type UserCreateWithoutFollowingInput = {
    firstName: string
    lastName?: string | null
    username: string
    email: string
    password: string
    bio?: string | null
    avatar?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    photos?: PhotoCreateManyWithoutUserInput
    likes?: LikeCreateManyWithoutUserInput
    comments?: CommentCreateManyWithoutUserInput
    followers?: UserCreateManyWithoutFollowingInput
  }

  export type UserCreateOrConnectWithoutfollowingInput = {
    where: UserWhereUniqueInput
    create: UserCreateWithoutFollowingInput
  }

  export type UserCreateWithoutFollowersInput = {
    firstName: string
    lastName?: string | null
    username: string
    email: string
    password: string
    bio?: string | null
    avatar?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    photos?: PhotoCreateManyWithoutUserInput
    likes?: LikeCreateManyWithoutUserInput
    comments?: CommentCreateManyWithoutUserInput
    following?: UserCreateManyWithoutFollowersInput
  }

  export type UserCreateOrConnectWithoutfollowersInput = {
    where: UserWhereUniqueInput
    create: UserCreateWithoutFollowersInput
  }

  export type PhotoUpdateWithWhereUniqueWithoutUserInput = {
    where: PhotoWhereUniqueInput
    data: PhotoUpdateWithoutUserInput
  }

  export type PhotoUpdateManyWithWhereWithoutUserInput = {
    where: PhotoScalarWhereInput
    data: PhotoUpdateManyMutationInput
  }

  export type PhotoScalarWhereInput = {
    AND?: Enumerable<PhotoScalarWhereInput>
    OR?: Enumerable<PhotoScalarWhereInput>
    NOT?: Enumerable<PhotoScalarWhereInput>
    id?: IntFilter | number
    userId?: IntFilter | number
    file?: StringFilter | string
    caption?: StringNullableFilter | string | null
    createdAt?: DateTimeFilter | Date | string
    updatedAt?: DateTimeFilter | Date | string
  }

  export type PhotoUpsertWithWhereUniqueWithoutUserInput = {
    where: PhotoWhereUniqueInput
    update: PhotoUpdateWithoutUserInput
    create: PhotoCreateWithoutUserInput
  }

  export type LikeUpdateWithWhereUniqueWithoutUserInput = {
    where: LikeWhereUniqueInput
    data: LikeUpdateWithoutUserInput
  }

  export type LikeUpdateManyWithWhereWithoutUserInput = {
    where: LikeScalarWhereInput
    data: LikeUpdateManyMutationInput
  }

  export type LikeScalarWhereInput = {
    AND?: Enumerable<LikeScalarWhereInput>
    OR?: Enumerable<LikeScalarWhereInput>
    NOT?: Enumerable<LikeScalarWhereInput>
    id?: IntFilter | number
    photoId?: IntFilter | number
    userId?: IntFilter | number
    createdAt?: DateTimeFilter | Date | string
    updatedAt?: DateTimeFilter | Date | string
  }

  export type LikeUpsertWithWhereUniqueWithoutUserInput = {
    where: LikeWhereUniqueInput
    update: LikeUpdateWithoutUserInput
    create: LikeCreateWithoutUserInput
  }

  export type CommentUpdateWithWhereUniqueWithoutUserInput = {
    where: CommentWhereUniqueInput
    data: CommentUpdateWithoutUserInput
  }

  export type CommentUpdateManyWithWhereWithoutUserInput = {
    where: CommentScalarWhereInput
    data: CommentUpdateManyMutationInput
  }

  export type CommentScalarWhereInput = {
    AND?: Enumerable<CommentScalarWhereInput>
    OR?: Enumerable<CommentScalarWhereInput>
    NOT?: Enumerable<CommentScalarWhereInput>
    id?: IntFilter | number
    payload?: StringFilter | string
    photoId?: IntFilter | number
    userId?: IntFilter | number
    createdAt?: DateTimeFilter | Date | string
    updatedAt?: DateTimeFilter | Date | string
  }

  export type CommentUpsertWithWhereUniqueWithoutUserInput = {
    where: CommentWhereUniqueInput
    update: CommentUpdateWithoutUserInput
    create: CommentCreateWithoutUserInput
  }

  export type UserUpdateWithWhereUniqueWithoutFollowingInput = {
    where: UserWhereUniqueInput
    data: UserUpdateWithoutFollowingInput
  }

  export type UserUpdateManyWithWhereWithoutFollowingInput = {
    where: UserScalarWhereInput
    data: UserUpdateManyMutationInput
  }

  export type UserScalarWhereInput = {
    AND?: Enumerable<UserScalarWhereInput>
    OR?: Enumerable<UserScalarWhereInput>
    NOT?: Enumerable<UserScalarWhereInput>
    id?: IntFilter | number
    firstName?: StringFilter | string
    lastName?: StringNullableFilter | string | null
    username?: StringFilter | string
    email?: StringFilter | string
    password?: StringFilter | string
    bio?: StringNullableFilter | string | null
    avatar?: StringNullableFilter | string | null
    createdAt?: DateTimeFilter | Date | string
    updatedAt?: DateTimeFilter | Date | string
  }

  export type UserUpsertWithWhereUniqueWithoutFollowingInput = {
    where: UserWhereUniqueInput
    update: UserUpdateWithoutFollowingInput
    create: UserCreateWithoutFollowingInput
  }

  export type UserUpdateWithWhereUniqueWithoutFollowersInput = {
    where: UserWhereUniqueInput
    data: UserUpdateWithoutFollowersInput
  }

  export type UserUpdateManyWithWhereWithoutFollowersInput = {
    where: UserScalarWhereInput
    data: UserUpdateManyMutationInput
  }

  export type UserUpsertWithWhereUniqueWithoutFollowersInput = {
    where: UserWhereUniqueInput
    update: UserUpdateWithoutFollowersInput
    create: UserCreateWithoutFollowersInput
  }

  export type UserCreateWithoutPhotosInput = {
    firstName: string
    lastName?: string | null
    username: string
    email: string
    password: string
    bio?: string | null
    avatar?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    likes?: LikeCreateManyWithoutUserInput
    comments?: CommentCreateManyWithoutUserInput
    followers?: UserCreateManyWithoutFollowingInput
    following?: UserCreateManyWithoutFollowersInput
  }

  export type UserCreateOrConnectWithoutphotosInput = {
    where: UserWhereUniqueInput
    create: UserCreateWithoutPhotosInput
  }

  export type HashtagCreateWithoutPhotosInput = {
    hashtag: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type HashtagCreateOrConnectWithoutphotosInput = {
    where: HashtagWhereUniqueInput
    create: HashtagCreateWithoutPhotosInput
  }

  export type LikeCreateWithoutPhotoInput = {
    createdAt?: Date | string
    updatedAt?: Date | string
    user: UserCreateOneWithoutLikesInput
  }

  export type LikeCreateOrConnectWithoutphotoInput = {
    where: LikeWhereUniqueInput
    create: LikeCreateWithoutPhotoInput
  }

  export type CommentCreateWithoutPhotoInput = {
    payload: string
    createdAt?: Date | string
    updatedAt?: Date | string
    user: UserCreateOneWithoutCommentsInput
  }

  export type CommentCreateOrConnectWithoutphotoInput = {
    where: CommentWhereUniqueInput
    create: CommentCreateWithoutPhotoInput
  }

  export type UserUpdateWithoutPhotosInput = {
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: NullableStringFieldUpdateOperationsInput | string | null
    username?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    bio?: NullableStringFieldUpdateOperationsInput | string | null
    avatar?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    likes?: LikeUpdateManyWithoutUserInput
    comments?: CommentUpdateManyWithoutUserInput
    followers?: UserUpdateManyWithoutFollowingInput
    following?: UserUpdateManyWithoutFollowersInput
  }

  export type UserUpsertWithoutPhotosInput = {
    update: UserUpdateWithoutPhotosInput
    create: UserCreateWithoutPhotosInput
  }

  export type HashtagUpdateWithWhereUniqueWithoutPhotosInput = {
    where: HashtagWhereUniqueInput
    data: HashtagUpdateWithoutPhotosInput
  }

  export type HashtagUpdateManyWithWhereWithoutPhotosInput = {
    where: HashtagScalarWhereInput
    data: HashtagUpdateManyMutationInput
  }

  export type HashtagScalarWhereInput = {
    AND?: Enumerable<HashtagScalarWhereInput>
    OR?: Enumerable<HashtagScalarWhereInput>
    NOT?: Enumerable<HashtagScalarWhereInput>
    id?: IntFilter | number
    hashtag?: StringFilter | string
    createdAt?: DateTimeFilter | Date | string
    updatedAt?: DateTimeFilter | Date | string
  }

  export type HashtagUpsertWithWhereUniqueWithoutPhotosInput = {
    where: HashtagWhereUniqueInput
    update: HashtagUpdateWithoutPhotosInput
    create: HashtagCreateWithoutPhotosInput
  }

  export type LikeUpdateWithWhereUniqueWithoutPhotoInput = {
    where: LikeWhereUniqueInput
    data: LikeUpdateWithoutPhotoInput
  }

  export type LikeUpdateManyWithWhereWithoutPhotoInput = {
    where: LikeScalarWhereInput
    data: LikeUpdateManyMutationInput
  }

  export type LikeUpsertWithWhereUniqueWithoutPhotoInput = {
    where: LikeWhereUniqueInput
    update: LikeUpdateWithoutPhotoInput
    create: LikeCreateWithoutPhotoInput
  }

  export type CommentUpdateWithWhereUniqueWithoutPhotoInput = {
    where: CommentWhereUniqueInput
    data: CommentUpdateWithoutPhotoInput
  }

  export type CommentUpdateManyWithWhereWithoutPhotoInput = {
    where: CommentScalarWhereInput
    data: CommentUpdateManyMutationInput
  }

  export type CommentUpsertWithWhereUniqueWithoutPhotoInput = {
    where: CommentWhereUniqueInput
    update: CommentUpdateWithoutPhotoInput
    create: CommentCreateWithoutPhotoInput
  }

  export type PhotoCreateWithoutHashtagsInput = {
    file: string
    caption?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    user: UserCreateOneWithoutPhotosInput
    likes?: LikeCreateManyWithoutPhotoInput
    comments?: CommentCreateManyWithoutPhotoInput
  }

  export type PhotoCreateOrConnectWithouthashtagsInput = {
    where: PhotoWhereUniqueInput
    create: PhotoCreateWithoutHashtagsInput
  }

  export type PhotoUpdateWithWhereUniqueWithoutHashtagsInput = {
    where: PhotoWhereUniqueInput
    data: PhotoUpdateWithoutHashtagsInput
  }

  export type PhotoUpdateManyWithWhereWithoutHashtagsInput = {
    where: PhotoScalarWhereInput
    data: PhotoUpdateManyMutationInput
  }

  export type PhotoUpsertWithWhereUniqueWithoutHashtagsInput = {
    where: PhotoWhereUniqueInput
    update: PhotoUpdateWithoutHashtagsInput
    create: PhotoCreateWithoutHashtagsInput
  }

  export type PhotoCreateWithoutLikesInput = {
    file: string
    caption?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    user: UserCreateOneWithoutPhotosInput
    hashtags?: HashtagCreateManyWithoutPhotosInput
    comments?: CommentCreateManyWithoutPhotoInput
  }

  export type PhotoCreateOrConnectWithoutlikesInput = {
    where: PhotoWhereUniqueInput
    create: PhotoCreateWithoutLikesInput
  }

  export type UserCreateWithoutLikesInput = {
    firstName: string
    lastName?: string | null
    username: string
    email: string
    password: string
    bio?: string | null
    avatar?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    photos?: PhotoCreateManyWithoutUserInput
    comments?: CommentCreateManyWithoutUserInput
    followers?: UserCreateManyWithoutFollowingInput
    following?: UserCreateManyWithoutFollowersInput
  }

  export type UserCreateOrConnectWithoutlikesInput = {
    where: UserWhereUniqueInput
    create: UserCreateWithoutLikesInput
  }

  export type PhotoUpdateWithoutLikesInput = {
    file?: StringFieldUpdateOperationsInput | string
    caption?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneRequiredWithoutPhotosInput
    hashtags?: HashtagUpdateManyWithoutPhotosInput
    comments?: CommentUpdateManyWithoutPhotoInput
  }

  export type PhotoUpsertWithoutLikesInput = {
    update: PhotoUpdateWithoutLikesInput
    create: PhotoCreateWithoutLikesInput
  }

  export type UserUpdateWithoutLikesInput = {
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: NullableStringFieldUpdateOperationsInput | string | null
    username?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    bio?: NullableStringFieldUpdateOperationsInput | string | null
    avatar?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    photos?: PhotoUpdateManyWithoutUserInput
    comments?: CommentUpdateManyWithoutUserInput
    followers?: UserUpdateManyWithoutFollowingInput
    following?: UserUpdateManyWithoutFollowersInput
  }

  export type UserUpsertWithoutLikesInput = {
    update: UserUpdateWithoutLikesInput
    create: UserCreateWithoutLikesInput
  }

  export type UserCreateWithoutCommentsInput = {
    firstName: string
    lastName?: string | null
    username: string
    email: string
    password: string
    bio?: string | null
    avatar?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    photos?: PhotoCreateManyWithoutUserInput
    likes?: LikeCreateManyWithoutUserInput
    followers?: UserCreateManyWithoutFollowingInput
    following?: UserCreateManyWithoutFollowersInput
  }

  export type UserCreateOrConnectWithoutcommentsInput = {
    where: UserWhereUniqueInput
    create: UserCreateWithoutCommentsInput
  }

  export type PhotoCreateWithoutCommentsInput = {
    file: string
    caption?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    user: UserCreateOneWithoutPhotosInput
    hashtags?: HashtagCreateManyWithoutPhotosInput
    likes?: LikeCreateManyWithoutPhotoInput
  }

  export type PhotoCreateOrConnectWithoutcommentsInput = {
    where: PhotoWhereUniqueInput
    create: PhotoCreateWithoutCommentsInput
  }

  export type UserUpdateWithoutCommentsInput = {
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: NullableStringFieldUpdateOperationsInput | string | null
    username?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    bio?: NullableStringFieldUpdateOperationsInput | string | null
    avatar?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    photos?: PhotoUpdateManyWithoutUserInput
    likes?: LikeUpdateManyWithoutUserInput
    followers?: UserUpdateManyWithoutFollowingInput
    following?: UserUpdateManyWithoutFollowersInput
  }

  export type UserUpsertWithoutCommentsInput = {
    update: UserUpdateWithoutCommentsInput
    create: UserCreateWithoutCommentsInput
  }

  export type PhotoUpdateWithoutCommentsInput = {
    file?: StringFieldUpdateOperationsInput | string
    caption?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneRequiredWithoutPhotosInput
    hashtags?: HashtagUpdateManyWithoutPhotosInput
    likes?: LikeUpdateManyWithoutPhotoInput
  }

  export type PhotoUpsertWithoutCommentsInput = {
    update: PhotoUpdateWithoutCommentsInput
    create: PhotoCreateWithoutCommentsInput
  }

  export type PhotoUpdateWithoutUserInput = {
    file?: StringFieldUpdateOperationsInput | string
    caption?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    hashtags?: HashtagUpdateManyWithoutPhotosInput
    likes?: LikeUpdateManyWithoutPhotoInput
    comments?: CommentUpdateManyWithoutPhotoInput
  }

  export type LikeUpdateWithoutUserInput = {
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    photo?: PhotoUpdateOneRequiredWithoutLikesInput
  }

  export type CommentUpdateWithoutUserInput = {
    payload?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    photo?: PhotoUpdateOneRequiredWithoutCommentsInput
  }

  export type UserUpdateWithoutFollowingInput = {
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: NullableStringFieldUpdateOperationsInput | string | null
    username?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    bio?: NullableStringFieldUpdateOperationsInput | string | null
    avatar?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    photos?: PhotoUpdateManyWithoutUserInput
    likes?: LikeUpdateManyWithoutUserInput
    comments?: CommentUpdateManyWithoutUserInput
    followers?: UserUpdateManyWithoutFollowingInput
  }

  export type UserUpdateWithoutFollowersInput = {
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: NullableStringFieldUpdateOperationsInput | string | null
    username?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    bio?: NullableStringFieldUpdateOperationsInput | string | null
    avatar?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    photos?: PhotoUpdateManyWithoutUserInput
    likes?: LikeUpdateManyWithoutUserInput
    comments?: CommentUpdateManyWithoutUserInput
    following?: UserUpdateManyWithoutFollowersInput
  }

  export type HashtagUpdateWithoutPhotosInput = {
    hashtag?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type LikeUpdateWithoutPhotoInput = {
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneRequiredWithoutLikesInput
  }

  export type CommentUpdateWithoutPhotoInput = {
    payload?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneRequiredWithoutCommentsInput
  }

  export type PhotoUpdateWithoutHashtagsInput = {
    file?: StringFieldUpdateOperationsInput | string
    caption?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneRequiredWithoutPhotosInput
    likes?: LikeUpdateManyWithoutPhotoInput
    comments?: CommentUpdateManyWithoutPhotoInput
  }



  /**
   * Batch Payload for updateMany & deleteMany
   */

  export type BatchPayload = {
    count: number
  }

  /**
   * DMMF
   */
  export const dmmf: runtime.DMMF.Document;
}

/*
* Exports for compatibility introduced in 2.12.0
* Please import from the Prisma namespace instead
*/

/**
 * @deprecated Renamed to `Prisma.MovieScalarFieldEnum`
 */
export type MovieScalarFieldEnum = Prisma.MovieScalarFieldEnum

/**
 * @deprecated Renamed to `Prisma.UserScalarFieldEnum`
 */
export type UserScalarFieldEnum = Prisma.UserScalarFieldEnum

/**
 * @deprecated Renamed to `Prisma.PhotoScalarFieldEnum`
 */
export type PhotoScalarFieldEnum = Prisma.PhotoScalarFieldEnum

/**
 * @deprecated Renamed to `Prisma.HashtagScalarFieldEnum`
 */
export type HashtagScalarFieldEnum = Prisma.HashtagScalarFieldEnum

/**
 * @deprecated Renamed to `Prisma.LikeScalarFieldEnum`
 */
export type LikeScalarFieldEnum = Prisma.LikeScalarFieldEnum

/**
 * @deprecated Renamed to `Prisma.CommentScalarFieldEnum`
 */
export type CommentScalarFieldEnum = Prisma.CommentScalarFieldEnum

/**
 * @deprecated Renamed to `Prisma.SortOrder`
 */
export type SortOrder = Prisma.SortOrder

/**
 * @deprecated Renamed to `Prisma.QueryMode`
 */
export type QueryMode = Prisma.QueryMode

/**
 * @deprecated Renamed to `Prisma.ModelName`
 */
export type ModelName = Prisma.ModelName

/**
 * @deprecated Renamed to `Prisma.AggregateMovie`
 */
export type AggregateMovie = Prisma.AggregateMovie

/**
 * @deprecated Renamed to `Prisma.MovieAvgAggregateOutputType`
 */
export type MovieAvgAggregateOutputType = Prisma.MovieAvgAggregateOutputType

/**
 * @deprecated Renamed to `Prisma.MovieSumAggregateOutputType`
 */
export type MovieSumAggregateOutputType = Prisma.MovieSumAggregateOutputType

/**
 * @deprecated Renamed to `Prisma.MovieMinAggregateOutputType`
 */
export type MovieMinAggregateOutputType = Prisma.MovieMinAggregateOutputType

/**
 * @deprecated Renamed to `Prisma.MovieMaxAggregateOutputType`
 */
export type MovieMaxAggregateOutputType = Prisma.MovieMaxAggregateOutputType

/**
 * @deprecated Renamed to `Prisma.MovieCountAggregateOutputType`
 */
export type MovieCountAggregateOutputType = Prisma.MovieCountAggregateOutputType

/**
 * @deprecated Renamed to `Prisma.AggregateMovieArgs`
 */
export type AggregateMovieArgs = Prisma.AggregateMovieArgs

/**
 * @deprecated Renamed to `Prisma.MovieAvgAggregateInputType`
 */
export type MovieAvgAggregateInputType = Prisma.MovieAvgAggregateInputType

/**
 * @deprecated Renamed to `Prisma.MovieSumAggregateInputType`
 */
export type MovieSumAggregateInputType = Prisma.MovieSumAggregateInputType

/**
 * @deprecated Renamed to `Prisma.MovieMinAggregateInputType`
 */
export type MovieMinAggregateInputType = Prisma.MovieMinAggregateInputType

/**
 * @deprecated Renamed to `Prisma.MovieMaxAggregateInputType`
 */
export type MovieMaxAggregateInputType = Prisma.MovieMaxAggregateInputType

/**
 * @deprecated Renamed to `Prisma.MovieCountAggregateInputType`
 */
export type MovieCountAggregateInputType = Prisma.MovieCountAggregateInputType

/**
 * @deprecated Renamed to `Prisma.MovieSelect`
 */
export type MovieSelect = Prisma.MovieSelect

/**
 * @deprecated Renamed to `Prisma.FindUniqueMovieArgs`
 */
export type FindUniqueMovieArgs = Prisma.FindUniqueMovieArgs

/**
 * @deprecated Renamed to `Prisma.FindFirstMovieArgs`
 */
export type FindFirstMovieArgs = Prisma.FindFirstMovieArgs

/**
 * @deprecated Renamed to `Prisma.FindManyMovieArgs`
 */
export type FindManyMovieArgs = Prisma.FindManyMovieArgs

/**
 * @deprecated Renamed to `Prisma.MovieCreateArgs`
 */
export type MovieCreateArgs = Prisma.MovieCreateArgs

/**
 * @deprecated Renamed to `Prisma.MovieUpdateArgs`
 */
export type MovieUpdateArgs = Prisma.MovieUpdateArgs

/**
 * @deprecated Renamed to `Prisma.MovieUpdateManyArgs`
 */
export type MovieUpdateManyArgs = Prisma.MovieUpdateManyArgs

/**
 * @deprecated Renamed to `Prisma.MovieUpsertArgs`
 */
export type MovieUpsertArgs = Prisma.MovieUpsertArgs

/**
 * @deprecated Renamed to `Prisma.MovieDeleteArgs`
 */
export type MovieDeleteArgs = Prisma.MovieDeleteArgs

/**
 * @deprecated Renamed to `Prisma.MovieDeleteManyArgs`
 */
export type MovieDeleteManyArgs = Prisma.MovieDeleteManyArgs

/**
 * @deprecated Renamed to `Prisma.AggregateUser`
 */
export type AggregateUser = Prisma.AggregateUser

/**
 * @deprecated Renamed to `Prisma.UserAvgAggregateOutputType`
 */
export type UserAvgAggregateOutputType = Prisma.UserAvgAggregateOutputType

/**
 * @deprecated Renamed to `Prisma.UserSumAggregateOutputType`
 */
export type UserSumAggregateOutputType = Prisma.UserSumAggregateOutputType

/**
 * @deprecated Renamed to `Prisma.UserMinAggregateOutputType`
 */
export type UserMinAggregateOutputType = Prisma.UserMinAggregateOutputType

/**
 * @deprecated Renamed to `Prisma.UserMaxAggregateOutputType`
 */
export type UserMaxAggregateOutputType = Prisma.UserMaxAggregateOutputType

/**
 * @deprecated Renamed to `Prisma.UserCountAggregateOutputType`
 */
export type UserCountAggregateOutputType = Prisma.UserCountAggregateOutputType

/**
 * @deprecated Renamed to `Prisma.AggregateUserArgs`
 */
export type AggregateUserArgs = Prisma.AggregateUserArgs

/**
 * @deprecated Renamed to `Prisma.UserAvgAggregateInputType`
 */
export type UserAvgAggregateInputType = Prisma.UserAvgAggregateInputType

/**
 * @deprecated Renamed to `Prisma.UserSumAggregateInputType`
 */
export type UserSumAggregateInputType = Prisma.UserSumAggregateInputType

/**
 * @deprecated Renamed to `Prisma.UserMinAggregateInputType`
 */
export type UserMinAggregateInputType = Prisma.UserMinAggregateInputType

/**
 * @deprecated Renamed to `Prisma.UserMaxAggregateInputType`
 */
export type UserMaxAggregateInputType = Prisma.UserMaxAggregateInputType

/**
 * @deprecated Renamed to `Prisma.UserCountAggregateInputType`
 */
export type UserCountAggregateInputType = Prisma.UserCountAggregateInputType

/**
 * @deprecated Renamed to `Prisma.UserSelect`
 */
export type UserSelect = Prisma.UserSelect

/**
 * @deprecated Renamed to `Prisma.UserInclude`
 */
export type UserInclude = Prisma.UserInclude

/**
 * @deprecated Renamed to `Prisma.FindUniqueUserArgs`
 */
export type FindUniqueUserArgs = Prisma.FindUniqueUserArgs

/**
 * @deprecated Renamed to `Prisma.FindFirstUserArgs`
 */
export type FindFirstUserArgs = Prisma.FindFirstUserArgs

/**
 * @deprecated Renamed to `Prisma.FindManyUserArgs`
 */
export type FindManyUserArgs = Prisma.FindManyUserArgs

/**
 * @deprecated Renamed to `Prisma.UserCreateArgs`
 */
export type UserCreateArgs = Prisma.UserCreateArgs

/**
 * @deprecated Renamed to `Prisma.UserUpdateArgs`
 */
export type UserUpdateArgs = Prisma.UserUpdateArgs

/**
 * @deprecated Renamed to `Prisma.UserUpdateManyArgs`
 */
export type UserUpdateManyArgs = Prisma.UserUpdateManyArgs

/**
 * @deprecated Renamed to `Prisma.UserUpsertArgs`
 */
export type UserUpsertArgs = Prisma.UserUpsertArgs

/**
 * @deprecated Renamed to `Prisma.UserDeleteArgs`
 */
export type UserDeleteArgs = Prisma.UserDeleteArgs

/**
 * @deprecated Renamed to `Prisma.UserDeleteManyArgs`
 */
export type UserDeleteManyArgs = Prisma.UserDeleteManyArgs

/**
 * @deprecated Renamed to `Prisma.AggregatePhoto`
 */
export type AggregatePhoto = Prisma.AggregatePhoto

/**
 * @deprecated Renamed to `Prisma.PhotoAvgAggregateOutputType`
 */
export type PhotoAvgAggregateOutputType = Prisma.PhotoAvgAggregateOutputType

/**
 * @deprecated Renamed to `Prisma.PhotoSumAggregateOutputType`
 */
export type PhotoSumAggregateOutputType = Prisma.PhotoSumAggregateOutputType

/**
 * @deprecated Renamed to `Prisma.PhotoMinAggregateOutputType`
 */
export type PhotoMinAggregateOutputType = Prisma.PhotoMinAggregateOutputType

/**
 * @deprecated Renamed to `Prisma.PhotoMaxAggregateOutputType`
 */
export type PhotoMaxAggregateOutputType = Prisma.PhotoMaxAggregateOutputType

/**
 * @deprecated Renamed to `Prisma.PhotoCountAggregateOutputType`
 */
export type PhotoCountAggregateOutputType = Prisma.PhotoCountAggregateOutputType

/**
 * @deprecated Renamed to `Prisma.AggregatePhotoArgs`
 */
export type AggregatePhotoArgs = Prisma.AggregatePhotoArgs

/**
 * @deprecated Renamed to `Prisma.PhotoAvgAggregateInputType`
 */
export type PhotoAvgAggregateInputType = Prisma.PhotoAvgAggregateInputType

/**
 * @deprecated Renamed to `Prisma.PhotoSumAggregateInputType`
 */
export type PhotoSumAggregateInputType = Prisma.PhotoSumAggregateInputType

/**
 * @deprecated Renamed to `Prisma.PhotoMinAggregateInputType`
 */
export type PhotoMinAggregateInputType = Prisma.PhotoMinAggregateInputType

/**
 * @deprecated Renamed to `Prisma.PhotoMaxAggregateInputType`
 */
export type PhotoMaxAggregateInputType = Prisma.PhotoMaxAggregateInputType

/**
 * @deprecated Renamed to `Prisma.PhotoCountAggregateInputType`
 */
export type PhotoCountAggregateInputType = Prisma.PhotoCountAggregateInputType

/**
 * @deprecated Renamed to `Prisma.PhotoSelect`
 */
export type PhotoSelect = Prisma.PhotoSelect

/**
 * @deprecated Renamed to `Prisma.PhotoInclude`
 */
export type PhotoInclude = Prisma.PhotoInclude

/**
 * @deprecated Renamed to `Prisma.FindUniquePhotoArgs`
 */
export type FindUniquePhotoArgs = Prisma.FindUniquePhotoArgs

/**
 * @deprecated Renamed to `Prisma.FindFirstPhotoArgs`
 */
export type FindFirstPhotoArgs = Prisma.FindFirstPhotoArgs

/**
 * @deprecated Renamed to `Prisma.FindManyPhotoArgs`
 */
export type FindManyPhotoArgs = Prisma.FindManyPhotoArgs

/**
 * @deprecated Renamed to `Prisma.PhotoCreateArgs`
 */
export type PhotoCreateArgs = Prisma.PhotoCreateArgs

/**
 * @deprecated Renamed to `Prisma.PhotoUpdateArgs`
 */
export type PhotoUpdateArgs = Prisma.PhotoUpdateArgs

/**
 * @deprecated Renamed to `Prisma.PhotoUpdateManyArgs`
 */
export type PhotoUpdateManyArgs = Prisma.PhotoUpdateManyArgs

/**
 * @deprecated Renamed to `Prisma.PhotoUpsertArgs`
 */
export type PhotoUpsertArgs = Prisma.PhotoUpsertArgs

/**
 * @deprecated Renamed to `Prisma.PhotoDeleteArgs`
 */
export type PhotoDeleteArgs = Prisma.PhotoDeleteArgs

/**
 * @deprecated Renamed to `Prisma.PhotoDeleteManyArgs`
 */
export type PhotoDeleteManyArgs = Prisma.PhotoDeleteManyArgs

/**
 * @deprecated Renamed to `Prisma.AggregateHashtag`
 */
export type AggregateHashtag = Prisma.AggregateHashtag

/**
 * @deprecated Renamed to `Prisma.HashtagAvgAggregateOutputType`
 */
export type HashtagAvgAggregateOutputType = Prisma.HashtagAvgAggregateOutputType

/**
 * @deprecated Renamed to `Prisma.HashtagSumAggregateOutputType`
 */
export type HashtagSumAggregateOutputType = Prisma.HashtagSumAggregateOutputType

/**
 * @deprecated Renamed to `Prisma.HashtagMinAggregateOutputType`
 */
export type HashtagMinAggregateOutputType = Prisma.HashtagMinAggregateOutputType

/**
 * @deprecated Renamed to `Prisma.HashtagMaxAggregateOutputType`
 */
export type HashtagMaxAggregateOutputType = Prisma.HashtagMaxAggregateOutputType

/**
 * @deprecated Renamed to `Prisma.HashtagCountAggregateOutputType`
 */
export type HashtagCountAggregateOutputType = Prisma.HashtagCountAggregateOutputType

/**
 * @deprecated Renamed to `Prisma.AggregateHashtagArgs`
 */
export type AggregateHashtagArgs = Prisma.AggregateHashtagArgs

/**
 * @deprecated Renamed to `Prisma.HashtagAvgAggregateInputType`
 */
export type HashtagAvgAggregateInputType = Prisma.HashtagAvgAggregateInputType

/**
 * @deprecated Renamed to `Prisma.HashtagSumAggregateInputType`
 */
export type HashtagSumAggregateInputType = Prisma.HashtagSumAggregateInputType

/**
 * @deprecated Renamed to `Prisma.HashtagMinAggregateInputType`
 */
export type HashtagMinAggregateInputType = Prisma.HashtagMinAggregateInputType

/**
 * @deprecated Renamed to `Prisma.HashtagMaxAggregateInputType`
 */
export type HashtagMaxAggregateInputType = Prisma.HashtagMaxAggregateInputType

/**
 * @deprecated Renamed to `Prisma.HashtagCountAggregateInputType`
 */
export type HashtagCountAggregateInputType = Prisma.HashtagCountAggregateInputType

/**
 * @deprecated Renamed to `Prisma.HashtagSelect`
 */
export type HashtagSelect = Prisma.HashtagSelect

/**
 * @deprecated Renamed to `Prisma.HashtagInclude`
 */
export type HashtagInclude = Prisma.HashtagInclude

/**
 * @deprecated Renamed to `Prisma.FindUniqueHashtagArgs`
 */
export type FindUniqueHashtagArgs = Prisma.FindUniqueHashtagArgs

/**
 * @deprecated Renamed to `Prisma.FindFirstHashtagArgs`
 */
export type FindFirstHashtagArgs = Prisma.FindFirstHashtagArgs

/**
 * @deprecated Renamed to `Prisma.FindManyHashtagArgs`
 */
export type FindManyHashtagArgs = Prisma.FindManyHashtagArgs

/**
 * @deprecated Renamed to `Prisma.HashtagCreateArgs`
 */
export type HashtagCreateArgs = Prisma.HashtagCreateArgs

/**
 * @deprecated Renamed to `Prisma.HashtagUpdateArgs`
 */
export type HashtagUpdateArgs = Prisma.HashtagUpdateArgs

/**
 * @deprecated Renamed to `Prisma.HashtagUpdateManyArgs`
 */
export type HashtagUpdateManyArgs = Prisma.HashtagUpdateManyArgs

/**
 * @deprecated Renamed to `Prisma.HashtagUpsertArgs`
 */
export type HashtagUpsertArgs = Prisma.HashtagUpsertArgs

/**
 * @deprecated Renamed to `Prisma.HashtagDeleteArgs`
 */
export type HashtagDeleteArgs = Prisma.HashtagDeleteArgs

/**
 * @deprecated Renamed to `Prisma.HashtagDeleteManyArgs`
 */
export type HashtagDeleteManyArgs = Prisma.HashtagDeleteManyArgs

/**
 * @deprecated Renamed to `Prisma.AggregateLike`
 */
export type AggregateLike = Prisma.AggregateLike

/**
 * @deprecated Renamed to `Prisma.LikeAvgAggregateOutputType`
 */
export type LikeAvgAggregateOutputType = Prisma.LikeAvgAggregateOutputType

/**
 * @deprecated Renamed to `Prisma.LikeSumAggregateOutputType`
 */
export type LikeSumAggregateOutputType = Prisma.LikeSumAggregateOutputType

/**
 * @deprecated Renamed to `Prisma.LikeMinAggregateOutputType`
 */
export type LikeMinAggregateOutputType = Prisma.LikeMinAggregateOutputType

/**
 * @deprecated Renamed to `Prisma.LikeMaxAggregateOutputType`
 */
export type LikeMaxAggregateOutputType = Prisma.LikeMaxAggregateOutputType

/**
 * @deprecated Renamed to `Prisma.LikeCountAggregateOutputType`
 */
export type LikeCountAggregateOutputType = Prisma.LikeCountAggregateOutputType

/**
 * @deprecated Renamed to `Prisma.AggregateLikeArgs`
 */
export type AggregateLikeArgs = Prisma.AggregateLikeArgs

/**
 * @deprecated Renamed to `Prisma.LikeAvgAggregateInputType`
 */
export type LikeAvgAggregateInputType = Prisma.LikeAvgAggregateInputType

/**
 * @deprecated Renamed to `Prisma.LikeSumAggregateInputType`
 */
export type LikeSumAggregateInputType = Prisma.LikeSumAggregateInputType

/**
 * @deprecated Renamed to `Prisma.LikeMinAggregateInputType`
 */
export type LikeMinAggregateInputType = Prisma.LikeMinAggregateInputType

/**
 * @deprecated Renamed to `Prisma.LikeMaxAggregateInputType`
 */
export type LikeMaxAggregateInputType = Prisma.LikeMaxAggregateInputType

/**
 * @deprecated Renamed to `Prisma.LikeCountAggregateInputType`
 */
export type LikeCountAggregateInputType = Prisma.LikeCountAggregateInputType

/**
 * @deprecated Renamed to `Prisma.LikeSelect`
 */
export type LikeSelect = Prisma.LikeSelect

/**
 * @deprecated Renamed to `Prisma.LikeInclude`
 */
export type LikeInclude = Prisma.LikeInclude

/**
 * @deprecated Renamed to `Prisma.FindUniqueLikeArgs`
 */
export type FindUniqueLikeArgs = Prisma.FindUniqueLikeArgs

/**
 * @deprecated Renamed to `Prisma.FindFirstLikeArgs`
 */
export type FindFirstLikeArgs = Prisma.FindFirstLikeArgs

/**
 * @deprecated Renamed to `Prisma.FindManyLikeArgs`
 */
export type FindManyLikeArgs = Prisma.FindManyLikeArgs

/**
 * @deprecated Renamed to `Prisma.LikeCreateArgs`
 */
export type LikeCreateArgs = Prisma.LikeCreateArgs

/**
 * @deprecated Renamed to `Prisma.LikeUpdateArgs`
 */
export type LikeUpdateArgs = Prisma.LikeUpdateArgs

/**
 * @deprecated Renamed to `Prisma.LikeUpdateManyArgs`
 */
export type LikeUpdateManyArgs = Prisma.LikeUpdateManyArgs

/**
 * @deprecated Renamed to `Prisma.LikeUpsertArgs`
 */
export type LikeUpsertArgs = Prisma.LikeUpsertArgs

/**
 * @deprecated Renamed to `Prisma.LikeDeleteArgs`
 */
export type LikeDeleteArgs = Prisma.LikeDeleteArgs

/**
 * @deprecated Renamed to `Prisma.LikeDeleteManyArgs`
 */
export type LikeDeleteManyArgs = Prisma.LikeDeleteManyArgs

/**
 * @deprecated Renamed to `Prisma.AggregateComment`
 */
export type AggregateComment = Prisma.AggregateComment

/**
 * @deprecated Renamed to `Prisma.CommentAvgAggregateOutputType`
 */
export type CommentAvgAggregateOutputType = Prisma.CommentAvgAggregateOutputType

/**
 * @deprecated Renamed to `Prisma.CommentSumAggregateOutputType`
 */
export type CommentSumAggregateOutputType = Prisma.CommentSumAggregateOutputType

/**
 * @deprecated Renamed to `Prisma.CommentMinAggregateOutputType`
 */
export type CommentMinAggregateOutputType = Prisma.CommentMinAggregateOutputType

/**
 * @deprecated Renamed to `Prisma.CommentMaxAggregateOutputType`
 */
export type CommentMaxAggregateOutputType = Prisma.CommentMaxAggregateOutputType

/**
 * @deprecated Renamed to `Prisma.CommentCountAggregateOutputType`
 */
export type CommentCountAggregateOutputType = Prisma.CommentCountAggregateOutputType

/**
 * @deprecated Renamed to `Prisma.AggregateCommentArgs`
 */
export type AggregateCommentArgs = Prisma.AggregateCommentArgs

/**
 * @deprecated Renamed to `Prisma.CommentAvgAggregateInputType`
 */
export type CommentAvgAggregateInputType = Prisma.CommentAvgAggregateInputType

/**
 * @deprecated Renamed to `Prisma.CommentSumAggregateInputType`
 */
export type CommentSumAggregateInputType = Prisma.CommentSumAggregateInputType

/**
 * @deprecated Renamed to `Prisma.CommentMinAggregateInputType`
 */
export type CommentMinAggregateInputType = Prisma.CommentMinAggregateInputType

/**
 * @deprecated Renamed to `Prisma.CommentMaxAggregateInputType`
 */
export type CommentMaxAggregateInputType = Prisma.CommentMaxAggregateInputType

/**
 * @deprecated Renamed to `Prisma.CommentCountAggregateInputType`
 */
export type CommentCountAggregateInputType = Prisma.CommentCountAggregateInputType

/**
 * @deprecated Renamed to `Prisma.CommentSelect`
 */
export type CommentSelect = Prisma.CommentSelect

/**
 * @deprecated Renamed to `Prisma.CommentInclude`
 */
export type CommentInclude = Prisma.CommentInclude

/**
 * @deprecated Renamed to `Prisma.FindUniqueCommentArgs`
 */
export type FindUniqueCommentArgs = Prisma.FindUniqueCommentArgs

/**
 * @deprecated Renamed to `Prisma.FindFirstCommentArgs`
 */
export type FindFirstCommentArgs = Prisma.FindFirstCommentArgs

/**
 * @deprecated Renamed to `Prisma.FindManyCommentArgs`
 */
export type FindManyCommentArgs = Prisma.FindManyCommentArgs

/**
 * @deprecated Renamed to `Prisma.CommentCreateArgs`
 */
export type CommentCreateArgs = Prisma.CommentCreateArgs

/**
 * @deprecated Renamed to `Prisma.CommentUpdateArgs`
 */
export type CommentUpdateArgs = Prisma.CommentUpdateArgs

/**
 * @deprecated Renamed to `Prisma.CommentUpdateManyArgs`
 */
export type CommentUpdateManyArgs = Prisma.CommentUpdateManyArgs

/**
 * @deprecated Renamed to `Prisma.CommentUpsertArgs`
 */
export type CommentUpsertArgs = Prisma.CommentUpsertArgs

/**
 * @deprecated Renamed to `Prisma.CommentDeleteArgs`
 */
export type CommentDeleteArgs = Prisma.CommentDeleteArgs

/**
 * @deprecated Renamed to `Prisma.CommentDeleteManyArgs`
 */
export type CommentDeleteManyArgs = Prisma.CommentDeleteManyArgs

/**
 * @deprecated Renamed to `Prisma.MovieWhereInput`
 */
export type MovieWhereInput = Prisma.MovieWhereInput

/**
 * @deprecated Renamed to `Prisma.MovieOrderByInput`
 */
export type MovieOrderByInput = Prisma.MovieOrderByInput

/**
 * @deprecated Renamed to `Prisma.MovieWhereUniqueInput`
 */
export type MovieWhereUniqueInput = Prisma.MovieWhereUniqueInput

/**
 * @deprecated Renamed to `Prisma.UserWhereInput`
 */
export type UserWhereInput = Prisma.UserWhereInput

/**
 * @deprecated Renamed to `Prisma.UserOrderByInput`
 */
export type UserOrderByInput = Prisma.UserOrderByInput

/**
 * @deprecated Renamed to `Prisma.UserWhereUniqueInput`
 */
export type UserWhereUniqueInput = Prisma.UserWhereUniqueInput

/**
 * @deprecated Renamed to `Prisma.PhotoWhereInput`
 */
export type PhotoWhereInput = Prisma.PhotoWhereInput

/**
 * @deprecated Renamed to `Prisma.PhotoOrderByInput`
 */
export type PhotoOrderByInput = Prisma.PhotoOrderByInput

/**
 * @deprecated Renamed to `Prisma.PhotoWhereUniqueInput`
 */
export type PhotoWhereUniqueInput = Prisma.PhotoWhereUniqueInput

/**
 * @deprecated Renamed to `Prisma.HashtagWhereInput`
 */
export type HashtagWhereInput = Prisma.HashtagWhereInput

/**
 * @deprecated Renamed to `Prisma.HashtagOrderByInput`
 */
export type HashtagOrderByInput = Prisma.HashtagOrderByInput

/**
 * @deprecated Renamed to `Prisma.HashtagWhereUniqueInput`
 */
export type HashtagWhereUniqueInput = Prisma.HashtagWhereUniqueInput

/**
 * @deprecated Renamed to `Prisma.LikeWhereInput`
 */
export type LikeWhereInput = Prisma.LikeWhereInput

/**
 * @deprecated Renamed to `Prisma.LikeOrderByInput`
 */
export type LikeOrderByInput = Prisma.LikeOrderByInput

/**
 * @deprecated Renamed to `Prisma.LikeWhereUniqueInput`
 */
export type LikeWhereUniqueInput = Prisma.LikeWhereUniqueInput

/**
 * @deprecated Renamed to `Prisma.CommentWhereInput`
 */
export type CommentWhereInput = Prisma.CommentWhereInput

/**
 * @deprecated Renamed to `Prisma.CommentOrderByInput`
 */
export type CommentOrderByInput = Prisma.CommentOrderByInput

/**
 * @deprecated Renamed to `Prisma.CommentWhereUniqueInput`
 */
export type CommentWhereUniqueInput = Prisma.CommentWhereUniqueInput

/**
 * @deprecated Renamed to `Prisma.MovieCreateInput`
 */
export type MovieCreateInput = Prisma.MovieCreateInput

/**
 * @deprecated Renamed to `Prisma.MovieUpdateInput`
 */
export type MovieUpdateInput = Prisma.MovieUpdateInput

/**
 * @deprecated Renamed to `Prisma.MovieUpdateManyMutationInput`
 */
export type MovieUpdateManyMutationInput = Prisma.MovieUpdateManyMutationInput

/**
 * @deprecated Renamed to `Prisma.UserCreateInput`
 */
export type UserCreateInput = Prisma.UserCreateInput

/**
 * @deprecated Renamed to `Prisma.UserUpdateInput`
 */
export type UserUpdateInput = Prisma.UserUpdateInput

/**
 * @deprecated Renamed to `Prisma.UserUpdateManyMutationInput`
 */
export type UserUpdateManyMutationInput = Prisma.UserUpdateManyMutationInput

/**
 * @deprecated Renamed to `Prisma.PhotoCreateInput`
 */
export type PhotoCreateInput = Prisma.PhotoCreateInput

/**
 * @deprecated Renamed to `Prisma.PhotoUpdateInput`
 */
export type PhotoUpdateInput = Prisma.PhotoUpdateInput

/**
 * @deprecated Renamed to `Prisma.PhotoUpdateManyMutationInput`
 */
export type PhotoUpdateManyMutationInput = Prisma.PhotoUpdateManyMutationInput

/**
 * @deprecated Renamed to `Prisma.HashtagCreateInput`
 */
export type HashtagCreateInput = Prisma.HashtagCreateInput

/**
 * @deprecated Renamed to `Prisma.HashtagUpdateInput`
 */
export type HashtagUpdateInput = Prisma.HashtagUpdateInput

/**
 * @deprecated Renamed to `Prisma.HashtagUpdateManyMutationInput`
 */
export type HashtagUpdateManyMutationInput = Prisma.HashtagUpdateManyMutationInput

/**
 * @deprecated Renamed to `Prisma.LikeCreateInput`
 */
export type LikeCreateInput = Prisma.LikeCreateInput

/**
 * @deprecated Renamed to `Prisma.LikeUpdateInput`
 */
export type LikeUpdateInput = Prisma.LikeUpdateInput

/**
 * @deprecated Renamed to `Prisma.LikeUpdateManyMutationInput`
 */
export type LikeUpdateManyMutationInput = Prisma.LikeUpdateManyMutationInput

/**
 * @deprecated Renamed to `Prisma.CommentCreateInput`
 */
export type CommentCreateInput = Prisma.CommentCreateInput

/**
 * @deprecated Renamed to `Prisma.CommentUpdateInput`
 */
export type CommentUpdateInput = Prisma.CommentUpdateInput

/**
 * @deprecated Renamed to `Prisma.CommentUpdateManyMutationInput`
 */
export type CommentUpdateManyMutationInput = Prisma.CommentUpdateManyMutationInput

/**
 * @deprecated Renamed to `Prisma.IntFilter`
 */
export type IntFilter = Prisma.IntFilter

/**
 * @deprecated Renamed to `Prisma.StringFilter`
 */
export type StringFilter = Prisma.StringFilter

/**
 * @deprecated Renamed to `Prisma.StringNullableFilter`
 */
export type StringNullableFilter = Prisma.StringNullableFilter

/**
 * @deprecated Renamed to `Prisma.DateTimeFilter`
 */
export type DateTimeFilter = Prisma.DateTimeFilter

/**
 * @deprecated Renamed to `Prisma.PhotoListRelationFilter`
 */
export type PhotoListRelationFilter = Prisma.PhotoListRelationFilter

/**
 * @deprecated Renamed to `Prisma.LikeListRelationFilter`
 */
export type LikeListRelationFilter = Prisma.LikeListRelationFilter

/**
 * @deprecated Renamed to `Prisma.CommentListRelationFilter`
 */
export type CommentListRelationFilter = Prisma.CommentListRelationFilter

/**
 * @deprecated Renamed to `Prisma.UserListRelationFilter`
 */
export type UserListRelationFilter = Prisma.UserListRelationFilter

/**
 * @deprecated Renamed to `Prisma.UserRelationFilter`
 */
export type UserRelationFilter = Prisma.UserRelationFilter

/**
 * @deprecated Renamed to `Prisma.HashtagListRelationFilter`
 */
export type HashtagListRelationFilter = Prisma.HashtagListRelationFilter

/**
 * @deprecated Renamed to `Prisma.PhotoRelationFilter`
 */
export type PhotoRelationFilter = Prisma.PhotoRelationFilter

/**
 * @deprecated Renamed to `Prisma.LikePhotoIdUserIdCompoundUniqueInput`
 */
export type LikePhotoIdUserIdCompoundUniqueInput = Prisma.LikePhotoIdUserIdCompoundUniqueInput

/**
 * @deprecated Renamed to `Prisma.StringFieldUpdateOperationsInput`
 */
export type StringFieldUpdateOperationsInput = Prisma.StringFieldUpdateOperationsInput

/**
 * @deprecated Renamed to `Prisma.IntFieldUpdateOperationsInput`
 */
export type IntFieldUpdateOperationsInput = Prisma.IntFieldUpdateOperationsInput

/**
 * @deprecated Renamed to `Prisma.NullableStringFieldUpdateOperationsInput`
 */
export type NullableStringFieldUpdateOperationsInput = Prisma.NullableStringFieldUpdateOperationsInput

/**
 * @deprecated Renamed to `Prisma.DateTimeFieldUpdateOperationsInput`
 */
export type DateTimeFieldUpdateOperationsInput = Prisma.DateTimeFieldUpdateOperationsInput

/**
 * @deprecated Renamed to `Prisma.PhotoCreateManyWithoutUserInput`
 */
export type PhotoCreateManyWithoutUserInput = Prisma.PhotoCreateManyWithoutUserInput

/**
 * @deprecated Renamed to `Prisma.LikeCreateManyWithoutUserInput`
 */
export type LikeCreateManyWithoutUserInput = Prisma.LikeCreateManyWithoutUserInput

/**
 * @deprecated Renamed to `Prisma.CommentCreateManyWithoutUserInput`
 */
export type CommentCreateManyWithoutUserInput = Prisma.CommentCreateManyWithoutUserInput

/**
 * @deprecated Renamed to `Prisma.UserCreateManyWithoutFollowingInput`
 */
export type UserCreateManyWithoutFollowingInput = Prisma.UserCreateManyWithoutFollowingInput

/**
 * @deprecated Renamed to `Prisma.UserCreateManyWithoutFollowersInput`
 */
export type UserCreateManyWithoutFollowersInput = Prisma.UserCreateManyWithoutFollowersInput

/**
 * @deprecated Renamed to `Prisma.PhotoUpdateManyWithoutUserInput`
 */
export type PhotoUpdateManyWithoutUserInput = Prisma.PhotoUpdateManyWithoutUserInput

/**
 * @deprecated Renamed to `Prisma.LikeUpdateManyWithoutUserInput`
 */
export type LikeUpdateManyWithoutUserInput = Prisma.LikeUpdateManyWithoutUserInput

/**
 * @deprecated Renamed to `Prisma.CommentUpdateManyWithoutUserInput`
 */
export type CommentUpdateManyWithoutUserInput = Prisma.CommentUpdateManyWithoutUserInput

/**
 * @deprecated Renamed to `Prisma.UserUpdateManyWithoutFollowingInput`
 */
export type UserUpdateManyWithoutFollowingInput = Prisma.UserUpdateManyWithoutFollowingInput

/**
 * @deprecated Renamed to `Prisma.UserUpdateManyWithoutFollowersInput`
 */
export type UserUpdateManyWithoutFollowersInput = Prisma.UserUpdateManyWithoutFollowersInput

/**
 * @deprecated Renamed to `Prisma.UserCreateOneWithoutPhotosInput`
 */
export type UserCreateOneWithoutPhotosInput = Prisma.UserCreateOneWithoutPhotosInput

/**
 * @deprecated Renamed to `Prisma.HashtagCreateManyWithoutPhotosInput`
 */
export type HashtagCreateManyWithoutPhotosInput = Prisma.HashtagCreateManyWithoutPhotosInput

/**
 * @deprecated Renamed to `Prisma.LikeCreateManyWithoutPhotoInput`
 */
export type LikeCreateManyWithoutPhotoInput = Prisma.LikeCreateManyWithoutPhotoInput

/**
 * @deprecated Renamed to `Prisma.CommentCreateManyWithoutPhotoInput`
 */
export type CommentCreateManyWithoutPhotoInput = Prisma.CommentCreateManyWithoutPhotoInput

/**
 * @deprecated Renamed to `Prisma.UserUpdateOneRequiredWithoutPhotosInput`
 */
export type UserUpdateOneRequiredWithoutPhotosInput = Prisma.UserUpdateOneRequiredWithoutPhotosInput

/**
 * @deprecated Renamed to `Prisma.HashtagUpdateManyWithoutPhotosInput`
 */
export type HashtagUpdateManyWithoutPhotosInput = Prisma.HashtagUpdateManyWithoutPhotosInput

/**
 * @deprecated Renamed to `Prisma.LikeUpdateManyWithoutPhotoInput`
 */
export type LikeUpdateManyWithoutPhotoInput = Prisma.LikeUpdateManyWithoutPhotoInput

/**
 * @deprecated Renamed to `Prisma.CommentUpdateManyWithoutPhotoInput`
 */
export type CommentUpdateManyWithoutPhotoInput = Prisma.CommentUpdateManyWithoutPhotoInput

/**
 * @deprecated Renamed to `Prisma.PhotoCreateManyWithoutHashtagsInput`
 */
export type PhotoCreateManyWithoutHashtagsInput = Prisma.PhotoCreateManyWithoutHashtagsInput

/**
 * @deprecated Renamed to `Prisma.PhotoUpdateManyWithoutHashtagsInput`
 */
export type PhotoUpdateManyWithoutHashtagsInput = Prisma.PhotoUpdateManyWithoutHashtagsInput

/**
 * @deprecated Renamed to `Prisma.PhotoCreateOneWithoutLikesInput`
 */
export type PhotoCreateOneWithoutLikesInput = Prisma.PhotoCreateOneWithoutLikesInput

/**
 * @deprecated Renamed to `Prisma.UserCreateOneWithoutLikesInput`
 */
export type UserCreateOneWithoutLikesInput = Prisma.UserCreateOneWithoutLikesInput

/**
 * @deprecated Renamed to `Prisma.PhotoUpdateOneRequiredWithoutLikesInput`
 */
export type PhotoUpdateOneRequiredWithoutLikesInput = Prisma.PhotoUpdateOneRequiredWithoutLikesInput

/**
 * @deprecated Renamed to `Prisma.UserUpdateOneRequiredWithoutLikesInput`
 */
export type UserUpdateOneRequiredWithoutLikesInput = Prisma.UserUpdateOneRequiredWithoutLikesInput

/**
 * @deprecated Renamed to `Prisma.UserCreateOneWithoutCommentsInput`
 */
export type UserCreateOneWithoutCommentsInput = Prisma.UserCreateOneWithoutCommentsInput

/**
 * @deprecated Renamed to `Prisma.PhotoCreateOneWithoutCommentsInput`
 */
export type PhotoCreateOneWithoutCommentsInput = Prisma.PhotoCreateOneWithoutCommentsInput

/**
 * @deprecated Renamed to `Prisma.UserUpdateOneRequiredWithoutCommentsInput`
 */
export type UserUpdateOneRequiredWithoutCommentsInput = Prisma.UserUpdateOneRequiredWithoutCommentsInput

/**
 * @deprecated Renamed to `Prisma.PhotoUpdateOneRequiredWithoutCommentsInput`
 */
export type PhotoUpdateOneRequiredWithoutCommentsInput = Prisma.PhotoUpdateOneRequiredWithoutCommentsInput

/**
 * @deprecated Renamed to `Prisma.NestedIntFilter`
 */
export type NestedIntFilter = Prisma.NestedIntFilter

/**
 * @deprecated Renamed to `Prisma.NestedStringFilter`
 */
export type NestedStringFilter = Prisma.NestedStringFilter

/**
 * @deprecated Renamed to `Prisma.NestedStringNullableFilter`
 */
export type NestedStringNullableFilter = Prisma.NestedStringNullableFilter

/**
 * @deprecated Renamed to `Prisma.NestedDateTimeFilter`
 */
export type NestedDateTimeFilter = Prisma.NestedDateTimeFilter

/**
 * @deprecated Renamed to `Prisma.PhotoCreateWithoutUserInput`
 */
export type PhotoCreateWithoutUserInput = Prisma.PhotoCreateWithoutUserInput

/**
 * @deprecated Renamed to `Prisma.PhotoCreateOrConnectWithoutuserInput`
 */
export type PhotoCreateOrConnectWithoutuserInput = Prisma.PhotoCreateOrConnectWithoutuserInput

/**
 * @deprecated Renamed to `Prisma.LikeCreateWithoutUserInput`
 */
export type LikeCreateWithoutUserInput = Prisma.LikeCreateWithoutUserInput

/**
 * @deprecated Renamed to `Prisma.LikeCreateOrConnectWithoutuserInput`
 */
export type LikeCreateOrConnectWithoutuserInput = Prisma.LikeCreateOrConnectWithoutuserInput

/**
 * @deprecated Renamed to `Prisma.CommentCreateWithoutUserInput`
 */
export type CommentCreateWithoutUserInput = Prisma.CommentCreateWithoutUserInput

/**
 * @deprecated Renamed to `Prisma.CommentCreateOrConnectWithoutuserInput`
 */
export type CommentCreateOrConnectWithoutuserInput = Prisma.CommentCreateOrConnectWithoutuserInput

/**
 * @deprecated Renamed to `Prisma.UserCreateWithoutFollowingInput`
 */
export type UserCreateWithoutFollowingInput = Prisma.UserCreateWithoutFollowingInput

/**
 * @deprecated Renamed to `Prisma.UserCreateOrConnectWithoutfollowingInput`
 */
export type UserCreateOrConnectWithoutfollowingInput = Prisma.UserCreateOrConnectWithoutfollowingInput

/**
 * @deprecated Renamed to `Prisma.UserCreateWithoutFollowersInput`
 */
export type UserCreateWithoutFollowersInput = Prisma.UserCreateWithoutFollowersInput

/**
 * @deprecated Renamed to `Prisma.UserCreateOrConnectWithoutfollowersInput`
 */
export type UserCreateOrConnectWithoutfollowersInput = Prisma.UserCreateOrConnectWithoutfollowersInput

/**
 * @deprecated Renamed to `Prisma.PhotoUpdateWithWhereUniqueWithoutUserInput`
 */
export type PhotoUpdateWithWhereUniqueWithoutUserInput = Prisma.PhotoUpdateWithWhereUniqueWithoutUserInput

/**
 * @deprecated Renamed to `Prisma.PhotoUpdateManyWithWhereWithoutUserInput`
 */
export type PhotoUpdateManyWithWhereWithoutUserInput = Prisma.PhotoUpdateManyWithWhereWithoutUserInput

/**
 * @deprecated Renamed to `Prisma.PhotoScalarWhereInput`
 */
export type PhotoScalarWhereInput = Prisma.PhotoScalarWhereInput

/**
 * @deprecated Renamed to `Prisma.PhotoUpsertWithWhereUniqueWithoutUserInput`
 */
export type PhotoUpsertWithWhereUniqueWithoutUserInput = Prisma.PhotoUpsertWithWhereUniqueWithoutUserInput

/**
 * @deprecated Renamed to `Prisma.LikeUpdateWithWhereUniqueWithoutUserInput`
 */
export type LikeUpdateWithWhereUniqueWithoutUserInput = Prisma.LikeUpdateWithWhereUniqueWithoutUserInput

/**
 * @deprecated Renamed to `Prisma.LikeUpdateManyWithWhereWithoutUserInput`
 */
export type LikeUpdateManyWithWhereWithoutUserInput = Prisma.LikeUpdateManyWithWhereWithoutUserInput

/**
 * @deprecated Renamed to `Prisma.LikeScalarWhereInput`
 */
export type LikeScalarWhereInput = Prisma.LikeScalarWhereInput

/**
 * @deprecated Renamed to `Prisma.LikeUpsertWithWhereUniqueWithoutUserInput`
 */
export type LikeUpsertWithWhereUniqueWithoutUserInput = Prisma.LikeUpsertWithWhereUniqueWithoutUserInput

/**
 * @deprecated Renamed to `Prisma.CommentUpdateWithWhereUniqueWithoutUserInput`
 */
export type CommentUpdateWithWhereUniqueWithoutUserInput = Prisma.CommentUpdateWithWhereUniqueWithoutUserInput

/**
 * @deprecated Renamed to `Prisma.CommentUpdateManyWithWhereWithoutUserInput`
 */
export type CommentUpdateManyWithWhereWithoutUserInput = Prisma.CommentUpdateManyWithWhereWithoutUserInput

/**
 * @deprecated Renamed to `Prisma.CommentScalarWhereInput`
 */
export type CommentScalarWhereInput = Prisma.CommentScalarWhereInput

/**
 * @deprecated Renamed to `Prisma.CommentUpsertWithWhereUniqueWithoutUserInput`
 */
export type CommentUpsertWithWhereUniqueWithoutUserInput = Prisma.CommentUpsertWithWhereUniqueWithoutUserInput

/**
 * @deprecated Renamed to `Prisma.UserUpdateWithWhereUniqueWithoutFollowingInput`
 */
export type UserUpdateWithWhereUniqueWithoutFollowingInput = Prisma.UserUpdateWithWhereUniqueWithoutFollowingInput

/**
 * @deprecated Renamed to `Prisma.UserUpdateManyWithWhereWithoutFollowingInput`
 */
export type UserUpdateManyWithWhereWithoutFollowingInput = Prisma.UserUpdateManyWithWhereWithoutFollowingInput

/**
 * @deprecated Renamed to `Prisma.UserScalarWhereInput`
 */
export type UserScalarWhereInput = Prisma.UserScalarWhereInput

/**
 * @deprecated Renamed to `Prisma.UserUpsertWithWhereUniqueWithoutFollowingInput`
 */
export type UserUpsertWithWhereUniqueWithoutFollowingInput = Prisma.UserUpsertWithWhereUniqueWithoutFollowingInput

/**
 * @deprecated Renamed to `Prisma.UserUpdateWithWhereUniqueWithoutFollowersInput`
 */
export type UserUpdateWithWhereUniqueWithoutFollowersInput = Prisma.UserUpdateWithWhereUniqueWithoutFollowersInput

/**
 * @deprecated Renamed to `Prisma.UserUpdateManyWithWhereWithoutFollowersInput`
 */
export type UserUpdateManyWithWhereWithoutFollowersInput = Prisma.UserUpdateManyWithWhereWithoutFollowersInput

/**
 * @deprecated Renamed to `Prisma.UserUpsertWithWhereUniqueWithoutFollowersInput`
 */
export type UserUpsertWithWhereUniqueWithoutFollowersInput = Prisma.UserUpsertWithWhereUniqueWithoutFollowersInput

/**
 * @deprecated Renamed to `Prisma.UserCreateWithoutPhotosInput`
 */
export type UserCreateWithoutPhotosInput = Prisma.UserCreateWithoutPhotosInput

/**
 * @deprecated Renamed to `Prisma.UserCreateOrConnectWithoutphotosInput`
 */
export type UserCreateOrConnectWithoutphotosInput = Prisma.UserCreateOrConnectWithoutphotosInput

/**
 * @deprecated Renamed to `Prisma.HashtagCreateWithoutPhotosInput`
 */
export type HashtagCreateWithoutPhotosInput = Prisma.HashtagCreateWithoutPhotosInput

/**
 * @deprecated Renamed to `Prisma.HashtagCreateOrConnectWithoutphotosInput`
 */
export type HashtagCreateOrConnectWithoutphotosInput = Prisma.HashtagCreateOrConnectWithoutphotosInput

/**
 * @deprecated Renamed to `Prisma.LikeCreateWithoutPhotoInput`
 */
export type LikeCreateWithoutPhotoInput = Prisma.LikeCreateWithoutPhotoInput

/**
 * @deprecated Renamed to `Prisma.LikeCreateOrConnectWithoutphotoInput`
 */
export type LikeCreateOrConnectWithoutphotoInput = Prisma.LikeCreateOrConnectWithoutphotoInput

/**
 * @deprecated Renamed to `Prisma.CommentCreateWithoutPhotoInput`
 */
export type CommentCreateWithoutPhotoInput = Prisma.CommentCreateWithoutPhotoInput

/**
 * @deprecated Renamed to `Prisma.CommentCreateOrConnectWithoutphotoInput`
 */
export type CommentCreateOrConnectWithoutphotoInput = Prisma.CommentCreateOrConnectWithoutphotoInput

/**
 * @deprecated Renamed to `Prisma.UserUpdateWithoutPhotosInput`
 */
export type UserUpdateWithoutPhotosInput = Prisma.UserUpdateWithoutPhotosInput

/**
 * @deprecated Renamed to `Prisma.UserUpsertWithoutPhotosInput`
 */
export type UserUpsertWithoutPhotosInput = Prisma.UserUpsertWithoutPhotosInput

/**
 * @deprecated Renamed to `Prisma.HashtagUpdateWithWhereUniqueWithoutPhotosInput`
 */
export type HashtagUpdateWithWhereUniqueWithoutPhotosInput = Prisma.HashtagUpdateWithWhereUniqueWithoutPhotosInput

/**
 * @deprecated Renamed to `Prisma.HashtagUpdateManyWithWhereWithoutPhotosInput`
 */
export type HashtagUpdateManyWithWhereWithoutPhotosInput = Prisma.HashtagUpdateManyWithWhereWithoutPhotosInput

/**
 * @deprecated Renamed to `Prisma.HashtagScalarWhereInput`
 */
export type HashtagScalarWhereInput = Prisma.HashtagScalarWhereInput

/**
 * @deprecated Renamed to `Prisma.HashtagUpsertWithWhereUniqueWithoutPhotosInput`
 */
export type HashtagUpsertWithWhereUniqueWithoutPhotosInput = Prisma.HashtagUpsertWithWhereUniqueWithoutPhotosInput

/**
 * @deprecated Renamed to `Prisma.LikeUpdateWithWhereUniqueWithoutPhotoInput`
 */
export type LikeUpdateWithWhereUniqueWithoutPhotoInput = Prisma.LikeUpdateWithWhereUniqueWithoutPhotoInput

/**
 * @deprecated Renamed to `Prisma.LikeUpdateManyWithWhereWithoutPhotoInput`
 */
export type LikeUpdateManyWithWhereWithoutPhotoInput = Prisma.LikeUpdateManyWithWhereWithoutPhotoInput

/**
 * @deprecated Renamed to `Prisma.LikeUpsertWithWhereUniqueWithoutPhotoInput`
 */
export type LikeUpsertWithWhereUniqueWithoutPhotoInput = Prisma.LikeUpsertWithWhereUniqueWithoutPhotoInput

/**
 * @deprecated Renamed to `Prisma.CommentUpdateWithWhereUniqueWithoutPhotoInput`
 */
export type CommentUpdateWithWhereUniqueWithoutPhotoInput = Prisma.CommentUpdateWithWhereUniqueWithoutPhotoInput

/**
 * @deprecated Renamed to `Prisma.CommentUpdateManyWithWhereWithoutPhotoInput`
 */
export type CommentUpdateManyWithWhereWithoutPhotoInput = Prisma.CommentUpdateManyWithWhereWithoutPhotoInput

/**
 * @deprecated Renamed to `Prisma.CommentUpsertWithWhereUniqueWithoutPhotoInput`
 */
export type CommentUpsertWithWhereUniqueWithoutPhotoInput = Prisma.CommentUpsertWithWhereUniqueWithoutPhotoInput

/**
 * @deprecated Renamed to `Prisma.PhotoCreateWithoutHashtagsInput`
 */
export type PhotoCreateWithoutHashtagsInput = Prisma.PhotoCreateWithoutHashtagsInput

/**
 * @deprecated Renamed to `Prisma.PhotoCreateOrConnectWithouthashtagsInput`
 */
export type PhotoCreateOrConnectWithouthashtagsInput = Prisma.PhotoCreateOrConnectWithouthashtagsInput

/**
 * @deprecated Renamed to `Prisma.PhotoUpdateWithWhereUniqueWithoutHashtagsInput`
 */
export type PhotoUpdateWithWhereUniqueWithoutHashtagsInput = Prisma.PhotoUpdateWithWhereUniqueWithoutHashtagsInput

/**
 * @deprecated Renamed to `Prisma.PhotoUpdateManyWithWhereWithoutHashtagsInput`
 */
export type PhotoUpdateManyWithWhereWithoutHashtagsInput = Prisma.PhotoUpdateManyWithWhereWithoutHashtagsInput

/**
 * @deprecated Renamed to `Prisma.PhotoUpsertWithWhereUniqueWithoutHashtagsInput`
 */
export type PhotoUpsertWithWhereUniqueWithoutHashtagsInput = Prisma.PhotoUpsertWithWhereUniqueWithoutHashtagsInput

/**
 * @deprecated Renamed to `Prisma.PhotoCreateWithoutLikesInput`
 */
export type PhotoCreateWithoutLikesInput = Prisma.PhotoCreateWithoutLikesInput

/**
 * @deprecated Renamed to `Prisma.PhotoCreateOrConnectWithoutlikesInput`
 */
export type PhotoCreateOrConnectWithoutlikesInput = Prisma.PhotoCreateOrConnectWithoutlikesInput

/**
 * @deprecated Renamed to `Prisma.UserCreateWithoutLikesInput`
 */
export type UserCreateWithoutLikesInput = Prisma.UserCreateWithoutLikesInput

/**
 * @deprecated Renamed to `Prisma.UserCreateOrConnectWithoutlikesInput`
 */
export type UserCreateOrConnectWithoutlikesInput = Prisma.UserCreateOrConnectWithoutlikesInput

/**
 * @deprecated Renamed to `Prisma.PhotoUpdateWithoutLikesInput`
 */
export type PhotoUpdateWithoutLikesInput = Prisma.PhotoUpdateWithoutLikesInput

/**
 * @deprecated Renamed to `Prisma.PhotoUpsertWithoutLikesInput`
 */
export type PhotoUpsertWithoutLikesInput = Prisma.PhotoUpsertWithoutLikesInput

/**
 * @deprecated Renamed to `Prisma.UserUpdateWithoutLikesInput`
 */
export type UserUpdateWithoutLikesInput = Prisma.UserUpdateWithoutLikesInput

/**
 * @deprecated Renamed to `Prisma.UserUpsertWithoutLikesInput`
 */
export type UserUpsertWithoutLikesInput = Prisma.UserUpsertWithoutLikesInput

/**
 * @deprecated Renamed to `Prisma.UserCreateWithoutCommentsInput`
 */
export type UserCreateWithoutCommentsInput = Prisma.UserCreateWithoutCommentsInput

/**
 * @deprecated Renamed to `Prisma.UserCreateOrConnectWithoutcommentsInput`
 */
export type UserCreateOrConnectWithoutcommentsInput = Prisma.UserCreateOrConnectWithoutcommentsInput

/**
 * @deprecated Renamed to `Prisma.PhotoCreateWithoutCommentsInput`
 */
export type PhotoCreateWithoutCommentsInput = Prisma.PhotoCreateWithoutCommentsInput

/**
 * @deprecated Renamed to `Prisma.PhotoCreateOrConnectWithoutcommentsInput`
 */
export type PhotoCreateOrConnectWithoutcommentsInput = Prisma.PhotoCreateOrConnectWithoutcommentsInput

/**
 * @deprecated Renamed to `Prisma.UserUpdateWithoutCommentsInput`
 */
export type UserUpdateWithoutCommentsInput = Prisma.UserUpdateWithoutCommentsInput

/**
 * @deprecated Renamed to `Prisma.UserUpsertWithoutCommentsInput`
 */
export type UserUpsertWithoutCommentsInput = Prisma.UserUpsertWithoutCommentsInput

/**
 * @deprecated Renamed to `Prisma.PhotoUpdateWithoutCommentsInput`
 */
export type PhotoUpdateWithoutCommentsInput = Prisma.PhotoUpdateWithoutCommentsInput

/**
 * @deprecated Renamed to `Prisma.PhotoUpsertWithoutCommentsInput`
 */
export type PhotoUpsertWithoutCommentsInput = Prisma.PhotoUpsertWithoutCommentsInput

/**
 * @deprecated Renamed to `Prisma.PhotoUpdateWithoutUserInput`
 */
export type PhotoUpdateWithoutUserInput = Prisma.PhotoUpdateWithoutUserInput

/**
 * @deprecated Renamed to `Prisma.LikeUpdateWithoutUserInput`
 */
export type LikeUpdateWithoutUserInput = Prisma.LikeUpdateWithoutUserInput

/**
 * @deprecated Renamed to `Prisma.CommentUpdateWithoutUserInput`
 */
export type CommentUpdateWithoutUserInput = Prisma.CommentUpdateWithoutUserInput

/**
 * @deprecated Renamed to `Prisma.UserUpdateWithoutFollowingInput`
 */
export type UserUpdateWithoutFollowingInput = Prisma.UserUpdateWithoutFollowingInput

/**
 * @deprecated Renamed to `Prisma.UserUpdateWithoutFollowersInput`
 */
export type UserUpdateWithoutFollowersInput = Prisma.UserUpdateWithoutFollowersInput

/**
 * @deprecated Renamed to `Prisma.HashtagUpdateWithoutPhotosInput`
 */
export type HashtagUpdateWithoutPhotosInput = Prisma.HashtagUpdateWithoutPhotosInput

/**
 * @deprecated Renamed to `Prisma.LikeUpdateWithoutPhotoInput`
 */
export type LikeUpdateWithoutPhotoInput = Prisma.LikeUpdateWithoutPhotoInput

/**
 * @deprecated Renamed to `Prisma.CommentUpdateWithoutPhotoInput`
 */
export type CommentUpdateWithoutPhotoInput = Prisma.CommentUpdateWithoutPhotoInput

/**
 * @deprecated Renamed to `Prisma.PhotoUpdateWithoutHashtagsInput`
 */
export type PhotoUpdateWithoutHashtagsInput = Prisma.PhotoUpdateWithoutHashtagsInput